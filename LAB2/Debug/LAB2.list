
LAB2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003908  08003908  00013908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003970  08003970  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08003970  08003970  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003970  08003970  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003970  08003970  00013970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003974  08003974  00013974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  2000007c  080039f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080039f4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f6c  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001686  00000000  00000000  00029011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002a698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c7f  00000000  00000000  0002b8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a5e9  00000000  00000000  0004254f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085b1f  00000000  00000000  0004cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2657  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a68  00000000  00000000  000d26ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080038ec 	.word	0x080038ec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080038ec 	.word	0x080038ec

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <clear_row>:
const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x18, 0x24, 0x24, 0x3c, 0x66, 0x42, 0x42, 0x42};
int row_index,shift;

void clear_row(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <clear_row+0x68>)
 8000a74:	f000 ff9c 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	4814      	ldr	r0, [pc, #80]	; (8000ad0 <clear_row+0x68>)
 8000a80:	f000 ff96 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <clear_row+0x68>)
 8000a8c:	f000 ff90 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <clear_row+0x68>)
 8000a98:	f000 ff8a 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa2:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <clear_row+0x68>)
 8000aa4:	f000 ff84 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4808      	ldr	r0, [pc, #32]	; (8000ad0 <clear_row+0x68>)
 8000ab0:	f000 ff7e 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <clear_row+0x68>)
 8000abc:	f000 ff78 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <clear_row+0x68>)
 8000ac8:	f000 ff72 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40010c00 	.word	0x40010c00

08000ad4 <displayRow>:



void displayRow(int index, uint8_t bits){
 8000ad4:	b5b0      	push	{r4, r5, r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	460b      	mov	r3, r1
 8000ade:	70fb      	strb	r3, [r7, #3]
	clear_row();
 8000ae0:	f7ff ffc2 	bl	8000a68 <clear_row>
	index = index % MAX_LED_MATRIX;
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000aec:	fb02 f201 	mul.w	r2, r2, r1
 8000af0:	1a9b      	subs	r3, r3, r2
 8000af2:	607b      	str	r3, [r7, #4]
	if (index%MAX_LED_MATRIX == 0) shift++;
 8000af4:	2208      	movs	r2, #8
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	fb93 f1f2 	sdiv	r1, r3, r2
 8000afc:	fb02 f201 	mul.w	r2, r2, r1
 8000b00:	1a9b      	subs	r3, r3, r2
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d104      	bne.n	8000b10 <displayRow+0x3c>
 8000b06:	4b42      	ldr	r3, [pc, #264]	; (8000c10 <displayRow+0x13c>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <displayRow+0x13c>)
 8000b0e:	6013      	str	r3, [r2, #0]
	uint8_t row_value = matrix_buffer[index]*pow(2,shift);
 8000b10:	4a40      	ldr	r2, [pc, #256]	; (8000c14 <displayRow+0x140>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4413      	add	r3, r2
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fc6b 	bl	80003f4 <__aeabi_i2d>
 8000b1e:	4604      	mov	r4, r0
 8000b20:	460d      	mov	r5, r1
 8000b22:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <displayRow+0x13c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f7ff fc64 	bl	80003f4 <__aeabi_i2d>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	460b      	mov	r3, r1
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000b38:	f001 ff48 	bl	80029cc <pow>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4620      	mov	r0, r4
 8000b42:	4629      	mov	r1, r5
 8000b44:	f7ff fcc0 	bl	80004c8 <__aeabi_dmul>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	4610      	mov	r0, r2
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f7ff ff6a 	bl	8000a28 <__aeabi_d2uiz>
 8000b54:	4603      	mov	r3, r0
 8000b56:	73fb      	strb	r3, [r7, #15]
	if(row_value & 0b00000001) HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, RESET);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <displayRow+0x9a>
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b68:	482b      	ldr	r0, [pc, #172]	; (8000c18 <displayRow+0x144>)
 8000b6a:	f000 ff21 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b00000010) HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, RESET);
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <displayRow+0xb0>
 8000b78:	2200      	movs	r2, #0
 8000b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7e:	4826      	ldr	r0, [pc, #152]	; (8000c18 <displayRow+0x144>)
 8000b80:	f000 ff16 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b00000100) HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, RESET);
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <displayRow+0xc6>
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b94:	4820      	ldr	r0, [pc, #128]	; (8000c18 <displayRow+0x144>)
 8000b96:	f000 ff0b 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b00001000) HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, RESET);
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <displayRow+0xdc>
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	481b      	ldr	r0, [pc, #108]	; (8000c18 <displayRow+0x144>)
 8000bac:	f000 ff00 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b00010000) HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, RESET);
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	f003 0310 	and.w	r3, r3, #16
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d005      	beq.n	8000bc6 <displayRow+0xf2>
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bc0:	4815      	ldr	r0, [pc, #84]	; (8000c18 <displayRow+0x144>)
 8000bc2:	f000 fef5 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b00100000) HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, RESET);
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	f003 0320 	and.w	r3, r3, #32
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d005      	beq.n	8000bdc <displayRow+0x108>
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bd6:	4810      	ldr	r0, [pc, #64]	; (8000c18 <displayRow+0x144>)
 8000bd8:	f000 feea 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b01000000) HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, RESET);
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <displayRow+0x11e>
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bec:	480a      	ldr	r0, [pc, #40]	; (8000c18 <displayRow+0x144>)
 8000bee:	f000 fedf 	bl	80019b0 <HAL_GPIO_WritePin>
	if(row_value & 0b10000000) HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, RESET);
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	da05      	bge.n	8000c06 <displayRow+0x132>
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <displayRow+0x144>)
 8000c02:	f000 fed5 	bl	80019b0 <HAL_GPIO_WritePin>

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200000a8 	.word	0x200000a8
 8000c14:	20000000 	.word	0x20000000
 8000c18:	40010c00 	.word	0x40010c00

08000c1c <updateLEDMatrix>:
void updateLEDMatrix(int index){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    switch (index % MAX_LED_MATRIX){
 8000c24:	2208      	movs	r2, #8
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	fb93 f1f2 	sdiv	r1, r3, r2
 8000c2c:	fb02 f201 	mul.w	r2, r2, r1
 8000c30:	1a9b      	subs	r3, r3, r2
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	f200 818c 	bhi.w	8000f50 <updateLEDMatrix+0x334>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <updateLEDMatrix+0x24>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000c61 	.word	0x08000c61
 8000c44:	08000cbf 	.word	0x08000cbf
 8000c48:	08000d1d 	.word	0x08000d1d
 8000c4c:	08000d7b 	.word	0x08000d7b
 8000c50:	08000dd9 	.word	0x08000dd9
 8000c54:	08000e37 	.word	0x08000e37
 8000c58:	08000e95 	.word	0x08000e95
 8000c5c:	08000ef3 	.word	0x08000ef3
        case 0:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2104      	movs	r1, #4
 8000c64:	48bd      	ldr	r0, [pc, #756]	; (8000f5c <updateLEDMatrix+0x340>)
 8000c66:	f000 fea3 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	48bb      	ldr	r0, [pc, #748]	; (8000f5c <updateLEDMatrix+0x340>)
 8000c70:	f000 fe9e 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c7a:	48b8      	ldr	r0, [pc, #736]	; (8000f5c <updateLEDMatrix+0x340>)
 8000c7c:	f000 fe98 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c86:	48b5      	ldr	r0, [pc, #724]	; (8000f5c <updateLEDMatrix+0x340>)
 8000c88:	f000 fe92 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c92:	48b2      	ldr	r0, [pc, #712]	; (8000f5c <updateLEDMatrix+0x340>)
 8000c94:	f000 fe8c 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c9e:	48af      	ldr	r0, [pc, #700]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ca0:	f000 fe86 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000caa:	48ac      	ldr	r0, [pc, #688]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cac:	f000 fe80 	bl	80019b0 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	48a9      	ldr	r0, [pc, #676]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cb8:	f000 fe7a 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000cbc:	e149      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 1:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2104      	movs	r1, #4
 8000cc2:	48a6      	ldr	r0, [pc, #664]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cc4:	f000 fe74 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2108      	movs	r1, #8
 8000ccc:	48a3      	ldr	r0, [pc, #652]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cce:	f000 fe6f 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd8:	48a0      	ldr	r0, [pc, #640]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cda:	f000 fe69 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ce4:	489d      	ldr	r0, [pc, #628]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ce6:	f000 fe63 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cf0:	489a      	ldr	r0, [pc, #616]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cf2:	f000 fe5d 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cfc:	4897      	ldr	r0, [pc, #604]	; (8000f5c <updateLEDMatrix+0x340>)
 8000cfe:	f000 fe57 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d08:	4894      	ldr	r0, [pc, #592]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d0a:	f000 fe51 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d14:	4891      	ldr	r0, [pc, #580]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d16:	f000 fe4b 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000d1a:	e11a      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 2:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2104      	movs	r1, #4
 8000d20:	488e      	ldr	r0, [pc, #568]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d22:	f000 fe45 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	488c      	ldr	r0, [pc, #560]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d2c:	f000 fe40 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d36:	4889      	ldr	r0, [pc, #548]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d38:	f000 fe3a 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d42:	4886      	ldr	r0, [pc, #536]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d44:	f000 fe34 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d4e:	4883      	ldr	r0, [pc, #524]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d50:	f000 fe2e 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	4880      	ldr	r0, [pc, #512]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d5c:	f000 fe28 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d66:	487d      	ldr	r0, [pc, #500]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d68:	f000 fe22 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d72:	487a      	ldr	r0, [pc, #488]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d74:	f000 fe1c 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000d78:	e0eb      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 3:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2104      	movs	r1, #4
 8000d7e:	4877      	ldr	r0, [pc, #476]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d80:	f000 fe16 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000d84:	2201      	movs	r2, #1
 8000d86:	2108      	movs	r1, #8
 8000d88:	4874      	ldr	r0, [pc, #464]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d8a:	f000 fe11 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d94:	4871      	ldr	r0, [pc, #452]	; (8000f5c <updateLEDMatrix+0x340>)
 8000d96:	f000 fe0b 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da0:	486e      	ldr	r0, [pc, #440]	; (8000f5c <updateLEDMatrix+0x340>)
 8000da2:	f000 fe05 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dac:	486b      	ldr	r0, [pc, #428]	; (8000f5c <updateLEDMatrix+0x340>)
 8000dae:	f000 fdff 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db8:	4868      	ldr	r0, [pc, #416]	; (8000f5c <updateLEDMatrix+0x340>)
 8000dba:	f000 fdf9 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4865      	ldr	r0, [pc, #404]	; (8000f5c <updateLEDMatrix+0x340>)
 8000dc6:	f000 fdf3 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd0:	4862      	ldr	r0, [pc, #392]	; (8000f5c <updateLEDMatrix+0x340>)
 8000dd2:	f000 fded 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000dd6:	e0bc      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 4:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2104      	movs	r1, #4
 8000ddc:	485f      	ldr	r0, [pc, #380]	; (8000f5c <updateLEDMatrix+0x340>)
 8000dde:	f000 fde7 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2108      	movs	r1, #8
 8000de6:	485d      	ldr	r0, [pc, #372]	; (8000f5c <updateLEDMatrix+0x340>)
 8000de8:	f000 fde2 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	485a      	ldr	r0, [pc, #360]	; (8000f5c <updateLEDMatrix+0x340>)
 8000df4:	f000 fddc 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dfe:	4857      	ldr	r0, [pc, #348]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e00:	f000 fdd6 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e0c:	f000 fdd0 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000e10:	2201      	movs	r2, #1
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	4851      	ldr	r0, [pc, #324]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e18:	f000 fdca 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e22:	484e      	ldr	r0, [pc, #312]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e24:	f000 fdc4 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2e:	484b      	ldr	r0, [pc, #300]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e30:	f000 fdbe 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000e34:	e08d      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 5:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2104      	movs	r1, #4
 8000e3a:	4848      	ldr	r0, [pc, #288]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e3c:	f000 fdb8 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	2108      	movs	r1, #8
 8000e44:	4845      	ldr	r0, [pc, #276]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e46:	f000 fdb3 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e50:	4842      	ldr	r0, [pc, #264]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e52:	f000 fdad 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e5c:	483f      	ldr	r0, [pc, #252]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e5e:	f000 fda7 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e68:	483c      	ldr	r0, [pc, #240]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e6a:	f000 fda1 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4839      	ldr	r0, [pc, #228]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e76:	f000 fd9b 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e80:	4836      	ldr	r0, [pc, #216]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e82:	f000 fd95 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	4833      	ldr	r0, [pc, #204]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e8e:	f000 fd8f 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000e92:	e05e      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 6:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000e94:	2201      	movs	r2, #1
 8000e96:	2104      	movs	r1, #4
 8000e98:	4830      	ldr	r0, [pc, #192]	; (8000f5c <updateLEDMatrix+0x340>)
 8000e9a:	f000 fd89 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	482e      	ldr	r0, [pc, #184]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ea4:	f000 fd84 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eae:	482b      	ldr	r0, [pc, #172]	; (8000f5c <updateLEDMatrix+0x340>)
 8000eb0:	f000 fd7e 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eba:	4828      	ldr	r0, [pc, #160]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ebc:	f000 fd78 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec6:	4825      	ldr	r0, [pc, #148]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ec8:	f000 fd72 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4822      	ldr	r0, [pc, #136]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ed4:	f000 fd6c 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ede:	481f      	ldr	r0, [pc, #124]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ee0:	f000 fd66 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 1);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eea:	481c      	ldr	r0, [pc, #112]	; (8000f5c <updateLEDMatrix+0x340>)
 8000eec:	f000 fd60 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000ef0:	e02f      	b.n	8000f52 <updateLEDMatrix+0x336>
        case 7:
        	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	2104      	movs	r1, #4
 8000ef6:	4819      	ldr	r0, [pc, #100]	; (8000f5c <updateLEDMatrix+0x340>)
 8000ef8:	f000 fd5a 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2108      	movs	r1, #8
 8000f00:	4816      	ldr	r0, [pc, #88]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f02:	f000 fd55 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	4813      	ldr	r0, [pc, #76]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f0e:	f000 fd4f 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, 1);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f18:	4810      	ldr	r0, [pc, #64]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f1a:	f000 fd49 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, 1);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f26:	f000 fd43 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, 1);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f30:	480a      	ldr	r0, [pc, #40]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f32:	f000 fd3d 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, 1);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f3e:	f000 fd37 	bl	80019b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <updateLEDMatrix+0x340>)
 8000f4a:	f000 fd31 	bl	80019b0 <HAL_GPIO_WritePin>
            break;
 8000f4e:	e000      	b.n	8000f52 <updateLEDMatrix+0x336>
        default:
            break;
 8000f50:	bf00      	nop
    }
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40010800 	.word	0x40010800

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fa39 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f83f 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000f6e:	f000 f879 	bl	8001064 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000f72:	f000 f8c3 	bl	80010fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f76:	4818      	ldr	r0, [pc, #96]	; (8000fd8 <main+0x78>)
 8000f78:	f001 f95e 	bl	8002238 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(50);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f000 f923 	bl	80011c8 <setTimer1>
  setTimer2(50);
 8000f82:	2032      	movs	r0, #50	; 0x32
 8000f84:	f000 f934 	bl	80011f0 <setTimer2>
  int index = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
  int row_index = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	603b      	str	r3, [r7, #0]
  shift = -1;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <main+0x7c>)
 8000f92:	f04f 32ff 	mov.w	r2, #4294967295
 8000f96:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if(timer1_flag == 1){
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <main+0x80>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <main+0x52>
		  updateLEDMatrix(index++);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1c5a      	adds	r2, r3, #1
 8000fa4:	607a      	str	r2, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fe38 	bl	8000c1c <updateLEDMatrix>
		  setTimer1(50);
 8000fac:	2032      	movs	r0, #50	; 0x32
 8000fae:	f000 f90b 	bl	80011c8 <setTimer1>
	  }

	  if(timer2_flag == 1){
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <main+0x84>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d1ee      	bne.n	8000f98 <main+0x38>
		  displayRow(row_index++, matrix_buffer[index]);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	603a      	str	r2, [r7, #0]
 8000fc0:	4909      	ldr	r1, [pc, #36]	; (8000fe8 <main+0x88>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	440a      	add	r2, r1
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	4611      	mov	r1, r2
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fd82 	bl	8000ad4 <displayRow>
		  setTimer2(50);
 8000fd0:	2032      	movs	r0, #50	; 0x32
 8000fd2:	f000 f90d 	bl	80011f0 <setTimer2>
	  if(timer1_flag == 1){
 8000fd6:	e7df      	b.n	8000f98 <main+0x38>
 8000fd8:	200000b0 	.word	0x200000b0
 8000fdc:	200000a8 	.word	0x200000a8
 8000fe0:	2000009c 	.word	0x2000009c
 8000fe4:	200000a4 	.word	0x200000a4
 8000fe8:	20000000 	.word	0x20000000

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b090      	sub	sp, #64	; 0x40
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0318 	add.w	r3, r7, #24
 8000ff6:	2228      	movs	r2, #40	; 0x28
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fcde 	bl	80029bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100e:	2302      	movs	r3, #2
 8001010:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001012:	2301      	movs	r3, #1
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001016:	2310      	movs	r3, #16
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101e:	f107 0318 	add.w	r3, r7, #24
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fcdc 	bl	80019e0 <HAL_RCC_OscConfig>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800102e:	f000 f8c5 	bl	80011bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001032:	230f      	movs	r3, #15
 8001034:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001036:	2300      	movs	r3, #0
 8001038:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f000 ff48 	bl	8001ee0 <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001056:	f000 f8b1 	bl	80011bc <Error_Handler>
  }
}
 800105a:	bf00      	nop
 800105c:	3740      	adds	r7, #64	; 0x40
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001080:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001082:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001086:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM2_Init+0x94>)
 800108a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800108e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM2_Init+0x94>)
 8001098:	2209      	movs	r2, #9
 800109a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_TIM2_Init+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010aa:	f001 f875 	bl	8002198 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b4:	f000 f882 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010c6:	f001 fa0b 	bl	80024e0 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 f874 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM2_Init+0x94>)
 80010e2:	f001 fbd7 	bl	8002894 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f866 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	200000b0 	.word	0x200000b0

080010fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001102:	f107 0308 	add.w	r3, r7, #8
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <MX_GPIO_Init+0xa0>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <MX_GPIO_Init+0xa0>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	6193      	str	r3, [r2, #24]
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <MX_GPIO_Init+0xa0>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	f003 0304 	and.w	r3, r3, #4
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <MX_GPIO_Init+0xa0>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <MX_GPIO_Init+0xa0>)
 800112e:	f043 0308 	orr.w	r3, r3, #8
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_GPIO_Init+0xa0>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001140:	2200      	movs	r2, #0
 8001142:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8001146:	4816      	ldr	r0, [pc, #88]	; (80011a0 <MX_GPIO_Init+0xa4>)
 8001148:	f000 fc32 	bl	80019b0 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 800114c:	2200      	movs	r2, #0
 800114e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_GPIO_Init+0xa8>)
 8001154:	f000 fc2c 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8001158:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800115c:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480b      	ldr	r0, [pc, #44]	; (80011a0 <MX_GPIO_Init+0xa4>)
 8001172:	f000 faa3 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8001176:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800117a:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2302      	movs	r3, #2
 8001186:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_GPIO_Init+0xa8>)
 8001190:	f000 fa94 	bl	80016bc <HAL_GPIO_Init>

}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40021000 	.word	0x40021000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	timerRun();
 80011b0:	f000 f832 	bl	8001218 <timerRun>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <setTimer1>:
int timer1_counter = 0;
int timer1_flag = 0;
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer1(int duration){
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <setTimer1+0x20>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <setTimer1+0x24>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	20000098 	.word	0x20000098
 80011ec:	2000009c 	.word	0x2000009c

080011f0 <setTimer2>:

void setTimer2(int duration){
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <setTimer2+0x20>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <setTimer2+0x24>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200000a0 	.word	0x200000a0
 8001214:	200000a4 	.word	0x200000a4

08001218 <timerRun>:

void timerRun(){
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <timerRun+0x4c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	dd0b      	ble.n	800123c <timerRun+0x24>
		timer1_counter--;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <timerRun+0x4c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3b01      	subs	r3, #1
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <timerRun+0x4c>)
 800122c:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800122e:	4b0d      	ldr	r3, [pc, #52]	; (8001264 <timerRun+0x4c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dc02      	bgt.n	800123c <timerRun+0x24>
			timer1_flag = 1;
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <timerRun+0x50>)
 8001238:	2201      	movs	r2, #1
 800123a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <timerRun+0x54>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	dd0b      	ble.n	800125c <timerRun+0x44>
		timer2_counter--;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <timerRun+0x54>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	3b01      	subs	r3, #1
 800124a:	4a08      	ldr	r2, [pc, #32]	; (800126c <timerRun+0x54>)
 800124c:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 800124e:	4b07      	ldr	r3, [pc, #28]	; (800126c <timerRun+0x54>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	dc02      	bgt.n	800125c <timerRun+0x44>
			timer2_flag = 1;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <timerRun+0x58>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr
 8001264:	20000098 	.word	0x20000098
 8001268:	2000009c 	.word	0x2000009c
 800126c:	200000a0 	.word	0x200000a0
 8001270:	200000a4 	.word	0x200000a4

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d113      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	201c      	movs	r0, #28
 8001308:	f000 f9a1 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800130c:	201c      	movs	r0, #28
 800130e:	f000 f9ba 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f87f 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM2_IRQHandler+0x10>)
 8001376:	f000 ffab 	bl	80022d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000b0 	.word	0x200000b0

08001384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001390:	f7ff fff8 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001394:	480b      	ldr	r0, [pc, #44]	; (80013c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001396:	490c      	ldr	r1, [pc, #48]	; (80013c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001398:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800139c:	e002      	b.n	80013a4 <LoopCopyDataInit>

0800139e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a2:	3304      	adds	r3, #4

080013a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a8:	d3f9      	bcc.n	800139e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013aa:	4a09      	ldr	r2, [pc, #36]	; (80013d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013ac:	4c09      	ldr	r4, [pc, #36]	; (80013d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b0:	e001      	b.n	80013b6 <LoopFillZerobss>

080013b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b4:	3204      	adds	r2, #4

080013b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b8:	d3fb      	bcc.n	80013b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ba:	f001 fadb 	bl	8002974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013be:	f7ff fdcf 	bl	8000f60 <main>
  bx lr
 80013c2:	4770      	bx	lr
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013cc:	08003978 	.word	0x08003978
  ldr r2, =_sbss
 80013d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013d4:	200000fc 	.word	0x200000fc

080013d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC1_2_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_Init+0x28>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a07      	ldr	r2, [pc, #28]	; (8001404 <HAL_Init+0x28>)
 80013e6:	f043 0310 	orr.w	r3, r3, #16
 80013ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ec:	2003      	movs	r0, #3
 80013ee:	f000 f923 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013f2:	200f      	movs	r0, #15
 80013f4:	f000 f808 	bl	8001408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f8:	f7ff ff3c 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40022000 	.word	0x40022000

08001408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_InitTick+0x54>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_InitTick+0x58>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001422:	fbb2 f3f3 	udiv	r3, r2, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f93b 	bl	80016a2 <HAL_SYSTICK_Config>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e00e      	b.n	8001454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b0f      	cmp	r3, #15
 800143a:	d80a      	bhi.n	8001452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800143c:	2200      	movs	r2, #0
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	f000 f903 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001448:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_InitTick+0x5c>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e000      	b.n	8001454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000008 	.word	0x20000008
 8001460:	20000010 	.word	0x20000010
 8001464:	2000000c 	.word	0x2000000c

08001468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x1c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x20>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_IncTick+0x20>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000010 	.word	0x20000010
 8001488:	200000f8 	.word	0x200000f8

0800148c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <HAL_GetTick+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	4618      	mov	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr
 800149c:	200000f8 	.word	0x200000f8

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	; (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff90 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff2d 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff42 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff35 	bl	8001504 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b08b      	sub	sp, #44	; 0x2c
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e148      	b.n	8001962 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016d0:	2201      	movs	r2, #1
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	f040 8137 	bne.w	800195c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4aa3      	ldr	r2, [pc, #652]	; (8001980 <HAL_GPIO_Init+0x2c4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d05e      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 80016f8:	4aa1      	ldr	r2, [pc, #644]	; (8001980 <HAL_GPIO_Init+0x2c4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d875      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 80016fe:	4aa1      	ldr	r2, [pc, #644]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d058      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001704:	4a9f      	ldr	r2, [pc, #636]	; (8001984 <HAL_GPIO_Init+0x2c8>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d86f      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800170a:	4a9f      	ldr	r2, [pc, #636]	; (8001988 <HAL_GPIO_Init+0x2cc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d052      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001710:	4a9d      	ldr	r2, [pc, #628]	; (8001988 <HAL_GPIO_Init+0x2cc>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d869      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001716:	4a9d      	ldr	r2, [pc, #628]	; (800198c <HAL_GPIO_Init+0x2d0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d04c      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 800171c:	4a9b      	ldr	r2, [pc, #620]	; (800198c <HAL_GPIO_Init+0x2d0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d863      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001722:	4a9b      	ldr	r2, [pc, #620]	; (8001990 <HAL_GPIO_Init+0x2d4>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d046      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
 8001728:	4a99      	ldr	r2, [pc, #612]	; (8001990 <HAL_GPIO_Init+0x2d4>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d85d      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 800172e:	2b12      	cmp	r3, #18
 8001730:	d82a      	bhi.n	8001788 <HAL_GPIO_Init+0xcc>
 8001732:	2b12      	cmp	r3, #18
 8001734:	d859      	bhi.n	80017ea <HAL_GPIO_Init+0x12e>
 8001736:	a201      	add	r2, pc, #4	; (adr r2, 800173c <HAL_GPIO_Init+0x80>)
 8001738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800173c:	080017b7 	.word	0x080017b7
 8001740:	08001791 	.word	0x08001791
 8001744:	080017a3 	.word	0x080017a3
 8001748:	080017e5 	.word	0x080017e5
 800174c:	080017eb 	.word	0x080017eb
 8001750:	080017eb 	.word	0x080017eb
 8001754:	080017eb 	.word	0x080017eb
 8001758:	080017eb 	.word	0x080017eb
 800175c:	080017eb 	.word	0x080017eb
 8001760:	080017eb 	.word	0x080017eb
 8001764:	080017eb 	.word	0x080017eb
 8001768:	080017eb 	.word	0x080017eb
 800176c:	080017eb 	.word	0x080017eb
 8001770:	080017eb 	.word	0x080017eb
 8001774:	080017eb 	.word	0x080017eb
 8001778:	080017eb 	.word	0x080017eb
 800177c:	080017eb 	.word	0x080017eb
 8001780:	08001799 	.word	0x08001799
 8001784:	080017ad 	.word	0x080017ad
 8001788:	4a82      	ldr	r2, [pc, #520]	; (8001994 <HAL_GPIO_Init+0x2d8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d013      	beq.n	80017b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800178e:	e02c      	b.n	80017ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e029      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	3304      	adds	r3, #4
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e024      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	3308      	adds	r3, #8
 80017a8:	623b      	str	r3, [r7, #32]
          break;
 80017aa:	e01f      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	330c      	adds	r3, #12
 80017b2:	623b      	str	r3, [r7, #32]
          break;
 80017b4:	e01a      	b.n	80017ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017be:	2304      	movs	r3, #4
 80017c0:	623b      	str	r3, [r7, #32]
          break;
 80017c2:	e013      	b.n	80017ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017cc:	2308      	movs	r3, #8
 80017ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	611a      	str	r2, [r3, #16]
          break;
 80017d6:	e009      	b.n	80017ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d8:	2308      	movs	r3, #8
 80017da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
          break;
 80017e2:	e003      	b.n	80017ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
          break;
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_Init+0x130>
          break;
 80017ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2bff      	cmp	r3, #255	; 0xff
 80017f0:	d801      	bhi.n	80017f6 <HAL_GPIO_Init+0x13a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	e001      	b.n	80017fa <HAL_GPIO_Init+0x13e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3304      	adds	r3, #4
 80017fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2bff      	cmp	r3, #255	; 0xff
 8001800:	d802      	bhi.n	8001808 <HAL_GPIO_Init+0x14c>
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x152>
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	3b08      	subs	r3, #8
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	210f      	movs	r1, #15
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	401a      	ands	r2, r3
 8001820:	6a39      	ldr	r1, [r7, #32]
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	fa01 f303 	lsl.w	r3, r1, r3
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	2b00      	cmp	r3, #0
 8001838:	f000 8090 	beq.w	800195c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800183c:	4b56      	ldr	r3, [pc, #344]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a55      	ldr	r2, [pc, #340]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_GPIO_Init+0x2dc>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_GPIO_Init+0x2e0>)
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	3302      	adds	r3, #2
 800185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001860:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2e4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00d      	beq.n	800189c <HAL_GPIO_Init+0x1e0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2e8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <HAL_GPIO_Init+0x1dc>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2ec>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_GPIO_Init+0x1d8>
 8001890:	2302      	movs	r3, #2
 8001892:	e004      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 8001894:	2303      	movs	r3, #3
 8001896:	e002      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 8001898:	2301      	movs	r3, #1
 800189a:	e000      	b.n	800189e <HAL_GPIO_Init+0x1e2>
 800189c:	2300      	movs	r3, #0
 800189e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a0:	f002 0203 	and.w	r2, r2, #3
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	4093      	lsls	r3, r2
 80018a8:	68fa      	ldr	r2, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ae:	493b      	ldr	r1, [pc, #236]	; (800199c <HAL_GPIO_Init+0x2e0>)
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d6:	4b35      	ldr	r3, [pc, #212]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	43db      	mvns	r3, r3
 80018de:	4933      	ldr	r1, [pc, #204]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	492d      	ldr	r1, [pc, #180]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	4929      	ldr	r1, [pc, #164]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001908:	4013      	ands	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001918:	4b24      	ldr	r3, [pc, #144]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4923      	ldr	r1, [pc, #140]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001926:	4b21      	ldr	r3, [pc, #132]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	491f      	ldr	r1, [pc, #124]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001930:	4013      	ands	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4919      	ldr	r1, [pc, #100]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4915      	ldr	r1, [pc, #84]	; (80019ac <HAL_GPIO_Init+0x2f0>)
 8001958:	4013      	ands	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3301      	adds	r3, #1
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aeaf 	bne.w	80016d0 <HAL_GPIO_Init+0x14>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	372c      	adds	r7, #44	; 0x2c
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	10320000 	.word	0x10320000
 8001984:	10310000 	.word	0x10310000
 8001988:	10220000 	.word	0x10220000
 800198c:	10210000 	.word	0x10210000
 8001990:	10120000 	.word	0x10120000
 8001994:	10110000 	.word	0x10110000
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010800 	.word	0x40010800
 80019a4:	40010c00 	.word	0x40010c00
 80019a8:	40011000 	.word	0x40011000
 80019ac:	40010400 	.word	0x40010400

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e26c      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x12c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e246      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76>
 8001a48:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a7f      	ldr	r2, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xbc>
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a71      	ldr	r2, [pc, #452]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fce6 	bl	800148c <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fce2 	bl	800148c <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e1fa      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe4>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fcd2 	bl	800148c <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fcce 	bl	800148c <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1e6      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x10c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1ba      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4939      	ldr	r1, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc87 	bl	800148c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fc83 	bl	800148c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e19b      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc66 	bl	800148c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc62 	bl	800148c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e17a      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc46 	bl	800148c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc42 	bl	800148c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e15a      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 fa9a 	bl	800215c <RCC_Delay>
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fc2c 	bl	800148c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fc28 	bl	800148c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e140      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	42420000 	.word	0x42420000
 8001c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b9e      	ldr	r3, [pc, #632]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e9      	bne.n	8001c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a6 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b94      	ldr	r3, [pc, #592]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a93      	ldr	r2, [pc, #588]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b91      	ldr	r3, [pc, #580]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b8e      	ldr	r3, [pc, #568]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fbe9 	bl	800148c <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff fbe5 	bl	800148c <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e0fd      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b81      	ldr	r3, [pc, #516]	; (8001ed8 <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x312>
 8001ce4:	4b7b      	ldr	r3, [pc, #492]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a7a      	ldr	r2, [pc, #488]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x334>
 8001cfa:	4b76      	ldr	r3, [pc, #472]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a75      	ldr	r2, [pc, #468]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b73      	ldr	r3, [pc, #460]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a72      	ldr	r2, [pc, #456]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x356>
 8001d1c:	4b6d      	ldr	r3, [pc, #436]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a6c      	ldr	r2, [pc, #432]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	4b6a      	ldr	r3, [pc, #424]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a69      	ldr	r2, [pc, #420]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d36:	4b67      	ldr	r3, [pc, #412]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a66      	ldr	r2, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a63      	ldr	r2, [pc, #396]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fb99 	bl	800148c <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fb95 	bl	800148c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0ab      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x37e>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fb83 	bl	800148c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fb7f 	bl	800148c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e095      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8081 	beq.w	8001eca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d061      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d146      	bne.n	8001e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b3f      	ldr	r3, [pc, #252]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb53 	bl	800148c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fb4f 	bl	800148c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e067      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e12:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	492d      	ldr	r1, [pc, #180]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e24:	4b2b      	ldr	r3, [pc, #172]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	430b      	orrs	r3, r1
 8001e36:	4927      	ldr	r1, [pc, #156]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb23 	bl	800148c <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff fb1f 	bl	800148c <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e037      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46a>
 8001e68:	e02f      	b.n	8001eca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_RCC_OscConfig+0x4fc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fb0c 	bl	800148c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff fb08 	bl	800148c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e020      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x498>
 8001e96:	e018      	b.n	8001eca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e013      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_RCC_OscConfig+0x4f4>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a1b      	ldr	r3, [r3, #32]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d001      	beq.n	8001eca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42420060 	.word	0x42420060

08001ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0d0      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d910      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 0207 	bic.w	r2, r3, #7
 8001f0a:	4965      	ldr	r1, [pc, #404]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	4a58      	ldr	r2, [pc, #352]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a52      	ldr	r2, [pc, #328]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d040      	beq.n	8002000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d115      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e073      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e06b      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4936      	ldr	r1, [pc, #216]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fa5c 	bl	800148c <HAL_GetTick>
 8001fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd8:	f7ff fa58 	bl	800148c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e053      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 020c 	and.w	r2, r3, #12
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d1eb      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002000:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d210      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0207 	bic.w	r2, r3, #7
 8002016:	4922      	ldr	r1, [pc, #136]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f821 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	; (80020a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1cc>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1d0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff f9ba 	bl	8001408 <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40022000 	.word	0x40022000
 80020a4:	40021000 	.word	0x40021000
 80020a8:	08003908 	.word	0x08003908
 80020ac:	20000008 	.word	0x20000008
 80020b0:	2000000c 	.word	0x2000000c

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b087      	sub	sp, #28
 80020b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x30>
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_GetSysClockFreq+0x36>
 80020e2:	e027      	b.n	8002134 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e4:	4b19      	ldr	r3, [pc, #100]	; (800214c <HAL_RCC_GetSysClockFreq+0x98>)
 80020e6:	613b      	str	r3, [r7, #16]
      break;
 80020e8:	e027      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0c9b      	lsrs	r3, r3, #18
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	4a17      	ldr	r2, [pc, #92]	; (8002150 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d010      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002102:	4b11      	ldr	r3, [pc, #68]	; (8002148 <HAL_RCC_GetSysClockFreq+0x94>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	0c5b      	lsrs	r3, r3, #17
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_RCC_GetSysClockFreq+0xa0>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a0d      	ldr	r2, [pc, #52]	; (800214c <HAL_RCC_GetSysClockFreq+0x98>)
 8002116:	fb02 f203 	mul.w	r2, r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e004      	b.n	800212e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a0c      	ldr	r2, [pc, #48]	; (8002158 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002128:	fb02 f303 	mul.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	613b      	str	r3, [r7, #16]
      break;
 8002132:	e002      	b.n	800213a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <HAL_RCC_GetSysClockFreq+0x98>)
 8002136:	613b      	str	r3, [r7, #16]
      break;
 8002138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213a:	693b      	ldr	r3, [r7, #16]
}
 800213c:	4618      	mov	r0, r3
 800213e:	371c      	adds	r7, #28
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	007a1200 	.word	0x007a1200
 8002150:	08003918 	.word	0x08003918
 8002154:	08003928 	.word	0x08003928
 8002158:	003d0900 	.word	0x003d0900

0800215c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002164:	4b0a      	ldr	r3, [pc, #40]	; (8002190 <RCC_Delay+0x34>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <RCC_Delay+0x38>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0a5b      	lsrs	r3, r3, #9
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002178:	bf00      	nop
  }
  while (Delay --);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d1f9      	bne.n	8002178 <RCC_Delay+0x1c>
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	20000008 	.word	0x20000008
 8002194:	10624dd3 	.word	0x10624dd3

08002198 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e041      	b.n	800222e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff f88a 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	4619      	mov	r1, r3
 80021d6:	4610      	mov	r0, r2
 80021d8:	f000 fa6e 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b01      	cmp	r3, #1
 800224a:	d001      	beq.n	8002250 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e035      	b.n	80022bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a16      	ldr	r2, [pc, #88]	; (80022c8 <HAL_TIM_Base_Start_IT+0x90>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d009      	beq.n	8002286 <HAL_TIM_Base_Start_IT+0x4e>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d004      	beq.n	8002286 <HAL_TIM_Base_Start_IT+0x4e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <HAL_TIM_Base_Start_IT+0x94>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d111      	bne.n	80022aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b06      	cmp	r3, #6
 8002296:	d010      	beq.n	80022ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022a8:	e007      	b.n	80022ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f042 0201 	orr.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40000400 	.word	0x40000400

080022d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d122      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d11b      	bne.n	800232c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f06f 0202 	mvn.w	r2, #2
 80022fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d003      	beq.n	800231a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9b4 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002318:	e005      	b.n	8002326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9a7 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f9b6 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d122      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d11b      	bne.n	8002380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0204 	mvn.w	r2, #4
 8002350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2202      	movs	r2, #2
 8002356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 f98a 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 800236c:	e005      	b.n	800237a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f97d 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f98c 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b08      	cmp	r3, #8
 800238c:	d122      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0308 	and.w	r3, r3, #8
 8002398:	2b08      	cmp	r3, #8
 800239a:	d11b      	bne.n	80023d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2204      	movs	r2, #4
 80023aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f960 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f953 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f962 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f003 0310 	and.w	r3, r3, #16
 80023de:	2b10      	cmp	r3, #16
 80023e0:	d122      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d11b      	bne.n	8002428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f06f 0210 	mvn.w	r2, #16
 80023f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2208      	movs	r2, #8
 80023fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f936 	bl	8002680 <HAL_TIM_IC_CaptureCallback>
 8002414:	e005      	b.n	8002422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f929 	bl	800266e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f938 	bl	8002692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10e      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d107      	bne.n	8002454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f06f 0201 	mvn.w	r2, #1
 800244c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe feaa 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b80      	cmp	r3, #128	; 0x80
 8002460:	d10e      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246c:	2b80      	cmp	r3, #128	; 0x80
 800246e:	d107      	bne.n	8002480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa6b 	bl	8002956 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248a:	2b40      	cmp	r3, #64	; 0x40
 800248c:	d10e      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d107      	bne.n	80024ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8fc 	bl	80026a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	f003 0320 	and.w	r3, r3, #32
 80024b6:	2b20      	cmp	r3, #32
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b20      	cmp	r3, #32
 80024c6:	d107      	bne.n	80024d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f06f 0220 	mvn.w	r2, #32
 80024d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fa36 	bl	8002944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_TIM_ConfigClockSource+0x1c>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e0b4      	b.n	8002666 <HAL_TIM_ConfigClockSource+0x186>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800251a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002522:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002534:	d03e      	beq.n	80025b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253a:	f200 8087 	bhi.w	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800253e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002542:	f000 8086 	beq.w	8002652 <HAL_TIM_ConfigClockSource+0x172>
 8002546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254a:	d87f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b70      	cmp	r3, #112	; 0x70
 800254e:	d01a      	beq.n	8002586 <HAL_TIM_ConfigClockSource+0xa6>
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d87b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002554:	2b60      	cmp	r3, #96	; 0x60
 8002556:	d050      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x11a>
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d877      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800255c:	2b50      	cmp	r3, #80	; 0x50
 800255e:	d03c      	beq.n	80025da <HAL_TIM_ConfigClockSource+0xfa>
 8002560:	2b50      	cmp	r3, #80	; 0x50
 8002562:	d873      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	d058      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x13a>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d86f      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800256c:	2b30      	cmp	r3, #48	; 0x30
 800256e:	d064      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	d86b      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 8002574:	2b20      	cmp	r3, #32
 8002576:	d060      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d867      	bhi.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
 800257c:	2b00      	cmp	r3, #0
 800257e:	d05c      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002580:	2b10      	cmp	r3, #16
 8002582:	d05a      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x15a>
 8002584:	e062      	b.n	800264c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6818      	ldr	r0, [r3, #0]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f000 f95e 	bl	8002856 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	609a      	str	r2, [r3, #8]
      break;
 80025b2:	e04f      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f000 f947 	bl	8002856 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d6:	609a      	str	r2, [r3, #8]
      break;
 80025d8:	e03c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f8be 	bl	8002768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2150      	movs	r1, #80	; 0x50
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f915 	bl	8002822 <TIM_ITRx_SetConfig>
      break;
 80025f8:	e02c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f8dc 	bl	80027c4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2160      	movs	r1, #96	; 0x60
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f905 	bl	8002822 <TIM_ITRx_SetConfig>
      break;
 8002618:	e01c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f89e 	bl	8002768 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2140      	movs	r1, #64	; 0x40
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f8f5 	bl	8002822 <TIM_ITRx_SetConfig>
      break;
 8002638:	e00c      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 f8ec 	bl	8002822 <TIM_ITRx_SetConfig>
      break;
 800264a:	e003      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e000      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <TIM_Base_SetConfig+0xa8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d007      	beq.n	80026e0 <TIM_Base_SetConfig+0x28>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d003      	beq.n	80026e0 <TIM_Base_SetConfig+0x28>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a22      	ldr	r2, [pc, #136]	; (8002764 <TIM_Base_SetConfig+0xac>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d108      	bne.n	80026f2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a1a      	ldr	r2, [pc, #104]	; (8002760 <TIM_Base_SetConfig+0xa8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0x52>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x52>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a17      	ldr	r2, [pc, #92]	; (8002764 <TIM_Base_SetConfig+0xac>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <TIM_Base_SetConfig+0xa8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d103      	bne.n	8002750 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	615a      	str	r2, [r3, #20]
}
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	40012c00 	.word	0x40012c00
 8002764:	40000400 	.word	0x40000400

08002768 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0201 	bic.w	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f023 030a 	bic.w	r3, r3, #10
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	f023 0210 	bic.w	r2, r3, #16
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	031b      	lsls	r3, r3, #12
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002800:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	4313      	orrs	r3, r2
 800280a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	621a      	str	r2, [r3, #32]
}
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr

08002822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002822:	b480      	push	{r7}
 8002824:	b085      	sub	sp, #20
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	f043 0307 	orr.w	r3, r3, #7
 8002844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	bf00      	nop
 800284e:	3714      	adds	r7, #20
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002856:	b480      	push	{r7}
 8002858:	b087      	sub	sp, #28
 800285a:	af00      	add	r7, sp, #0
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002870:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	021a      	lsls	r2, r3, #8
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	431a      	orrs	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4313      	orrs	r3, r2
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	609a      	str	r2, [r3, #8]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e041      	b.n	8002930 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a14      	ldr	r2, [pc, #80]	; (800293c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d009      	beq.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f8:	d004      	beq.n	8002904 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a10      	ldr	r2, [pc, #64]	; (8002940 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10c      	bne.n	800291e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800290a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	4313      	orrs	r3, r2
 8002914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40000400 	.word	0x40000400

08002944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <__errno>:
 8002968:	4b01      	ldr	r3, [pc, #4]	; (8002970 <__errno+0x8>)
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000014 	.word	0x20000014

08002974 <__libc_init_array>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	2600      	movs	r6, #0
 8002978:	4d0c      	ldr	r5, [pc, #48]	; (80029ac <__libc_init_array+0x38>)
 800297a:	4c0d      	ldr	r4, [pc, #52]	; (80029b0 <__libc_init_array+0x3c>)
 800297c:	1b64      	subs	r4, r4, r5
 800297e:	10a4      	asrs	r4, r4, #2
 8002980:	42a6      	cmp	r6, r4
 8002982:	d109      	bne.n	8002998 <__libc_init_array+0x24>
 8002984:	f000 ffb2 	bl	80038ec <_init>
 8002988:	2600      	movs	r6, #0
 800298a:	4d0a      	ldr	r5, [pc, #40]	; (80029b4 <__libc_init_array+0x40>)
 800298c:	4c0a      	ldr	r4, [pc, #40]	; (80029b8 <__libc_init_array+0x44>)
 800298e:	1b64      	subs	r4, r4, r5
 8002990:	10a4      	asrs	r4, r4, #2
 8002992:	42a6      	cmp	r6, r4
 8002994:	d105      	bne.n	80029a2 <__libc_init_array+0x2e>
 8002996:	bd70      	pop	{r4, r5, r6, pc}
 8002998:	f855 3b04 	ldr.w	r3, [r5], #4
 800299c:	4798      	blx	r3
 800299e:	3601      	adds	r6, #1
 80029a0:	e7ee      	b.n	8002980 <__libc_init_array+0xc>
 80029a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029a6:	4798      	blx	r3
 80029a8:	3601      	adds	r6, #1
 80029aa:	e7f2      	b.n	8002992 <__libc_init_array+0x1e>
 80029ac:	08003970 	.word	0x08003970
 80029b0:	08003970 	.word	0x08003970
 80029b4:	08003970 	.word	0x08003970
 80029b8:	08003974 	.word	0x08003974

080029bc <memset>:
 80029bc:	4603      	mov	r3, r0
 80029be:	4402      	add	r2, r0
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d100      	bne.n	80029c6 <memset+0xa>
 80029c4:	4770      	bx	lr
 80029c6:	f803 1b01 	strb.w	r1, [r3], #1
 80029ca:	e7f9      	b.n	80029c0 <memset+0x4>

080029cc <pow>:
 80029cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029d0:	461f      	mov	r7, r3
 80029d2:	4680      	mov	r8, r0
 80029d4:	4689      	mov	r9, r1
 80029d6:	4616      	mov	r6, r2
 80029d8:	f000 f8a6 	bl	8002b28 <__ieee754_pow>
 80029dc:	4b4d      	ldr	r3, [pc, #308]	; (8002b14 <pow+0x148>)
 80029de:	4604      	mov	r4, r0
 80029e0:	f993 3000 	ldrsb.w	r3, [r3]
 80029e4:	460d      	mov	r5, r1
 80029e6:	3301      	adds	r3, #1
 80029e8:	d015      	beq.n	8002a16 <pow+0x4a>
 80029ea:	4632      	mov	r2, r6
 80029ec:	463b      	mov	r3, r7
 80029ee:	4630      	mov	r0, r6
 80029f0:	4639      	mov	r1, r7
 80029f2:	f7fe f803 	bl	80009fc <__aeabi_dcmpun>
 80029f6:	b970      	cbnz	r0, 8002a16 <pow+0x4a>
 80029f8:	4642      	mov	r2, r8
 80029fa:	464b      	mov	r3, r9
 80029fc:	4640      	mov	r0, r8
 80029fe:	4649      	mov	r1, r9
 8002a00:	f7fd fffc 	bl	80009fc <__aeabi_dcmpun>
 8002a04:	2200      	movs	r2, #0
 8002a06:	2300      	movs	r3, #0
 8002a08:	b148      	cbz	r0, 8002a1e <pow+0x52>
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	f7fd ffc3 	bl	8000998 <__aeabi_dcmpeq>
 8002a12:	2800      	cmp	r0, #0
 8002a14:	d17b      	bne.n	8002b0e <pow+0x142>
 8002a16:	4620      	mov	r0, r4
 8002a18:	4629      	mov	r1, r5
 8002a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a1e:	4640      	mov	r0, r8
 8002a20:	4649      	mov	r1, r9
 8002a22:	f7fd ffb9 	bl	8000998 <__aeabi_dcmpeq>
 8002a26:	b1e0      	cbz	r0, 8002a62 <pow+0x96>
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	4639      	mov	r1, r7
 8002a30:	f7fd ffb2 	bl	8000998 <__aeabi_dcmpeq>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d16a      	bne.n	8002b0e <pow+0x142>
 8002a38:	4630      	mov	r0, r6
 8002a3a:	4639      	mov	r1, r7
 8002a3c:	f000 fe39 	bl	80036b2 <finite>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	d0e8      	beq.n	8002a16 <pow+0x4a>
 8002a44:	2200      	movs	r2, #0
 8002a46:	2300      	movs	r3, #0
 8002a48:	4630      	mov	r0, r6
 8002a4a:	4639      	mov	r1, r7
 8002a4c:	f7fd ffae 	bl	80009ac <__aeabi_dcmplt>
 8002a50:	2800      	cmp	r0, #0
 8002a52:	d0e0      	beq.n	8002a16 <pow+0x4a>
 8002a54:	f7ff ff88 	bl	8002968 <__errno>
 8002a58:	2321      	movs	r3, #33	; 0x21
 8002a5a:	2400      	movs	r4, #0
 8002a5c:	6003      	str	r3, [r0, #0]
 8002a5e:	4d2e      	ldr	r5, [pc, #184]	; (8002b18 <pow+0x14c>)
 8002a60:	e7d9      	b.n	8002a16 <pow+0x4a>
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f000 fe24 	bl	80036b2 <finite>
 8002a6a:	bba8      	cbnz	r0, 8002ad8 <pow+0x10c>
 8002a6c:	4640      	mov	r0, r8
 8002a6e:	4649      	mov	r1, r9
 8002a70:	f000 fe1f 	bl	80036b2 <finite>
 8002a74:	b380      	cbz	r0, 8002ad8 <pow+0x10c>
 8002a76:	4630      	mov	r0, r6
 8002a78:	4639      	mov	r1, r7
 8002a7a:	f000 fe1a 	bl	80036b2 <finite>
 8002a7e:	b358      	cbz	r0, 8002ad8 <pow+0x10c>
 8002a80:	4622      	mov	r2, r4
 8002a82:	462b      	mov	r3, r5
 8002a84:	4620      	mov	r0, r4
 8002a86:	4629      	mov	r1, r5
 8002a88:	f7fd ffb8 	bl	80009fc <__aeabi_dcmpun>
 8002a8c:	b160      	cbz	r0, 8002aa8 <pow+0xdc>
 8002a8e:	f7ff ff6b 	bl	8002968 <__errno>
 8002a92:	2321      	movs	r3, #33	; 0x21
 8002a94:	2200      	movs	r2, #0
 8002a96:	6003      	str	r3, [r0, #0]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f7fd fe3d 	bl	800071c <__aeabi_ddiv>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	e7b6      	b.n	8002a16 <pow+0x4a>
 8002aa8:	f7ff ff5e 	bl	8002968 <__errno>
 8002aac:	2322      	movs	r3, #34	; 0x22
 8002aae:	2200      	movs	r2, #0
 8002ab0:	6003      	str	r3, [r0, #0]
 8002ab2:	4649      	mov	r1, r9
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	f7fd ff78 	bl	80009ac <__aeabi_dcmplt>
 8002abc:	2400      	movs	r4, #0
 8002abe:	b148      	cbz	r0, 8002ad4 <pow+0x108>
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	4639      	mov	r1, r7
 8002ac4:	f000 fe02 	bl	80036cc <rint>
 8002ac8:	4632      	mov	r2, r6
 8002aca:	463b      	mov	r3, r7
 8002acc:	f7fd ff64 	bl	8000998 <__aeabi_dcmpeq>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d0c4      	beq.n	8002a5e <pow+0x92>
 8002ad4:	4d11      	ldr	r5, [pc, #68]	; (8002b1c <pow+0x150>)
 8002ad6:	e79e      	b.n	8002a16 <pow+0x4a>
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2300      	movs	r3, #0
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd ff5a 	bl	8000998 <__aeabi_dcmpeq>
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	d096      	beq.n	8002a16 <pow+0x4a>
 8002ae8:	4640      	mov	r0, r8
 8002aea:	4649      	mov	r1, r9
 8002aec:	f000 fde1 	bl	80036b2 <finite>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d090      	beq.n	8002a16 <pow+0x4a>
 8002af4:	4630      	mov	r0, r6
 8002af6:	4639      	mov	r1, r7
 8002af8:	f000 fddb 	bl	80036b2 <finite>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d08a      	beq.n	8002a16 <pow+0x4a>
 8002b00:	f7ff ff32 	bl	8002968 <__errno>
 8002b04:	2322      	movs	r3, #34	; 0x22
 8002b06:	2400      	movs	r4, #0
 8002b08:	2500      	movs	r5, #0
 8002b0a:	6003      	str	r3, [r0, #0]
 8002b0c:	e783      	b.n	8002a16 <pow+0x4a>
 8002b0e:	2400      	movs	r4, #0
 8002b10:	4d03      	ldr	r5, [pc, #12]	; (8002b20 <pow+0x154>)
 8002b12:	e780      	b.n	8002a16 <pow+0x4a>
 8002b14:	20000078 	.word	0x20000078
 8002b18:	fff00000 	.word	0xfff00000
 8002b1c:	7ff00000 	.word	0x7ff00000
 8002b20:	3ff00000 	.word	0x3ff00000
 8002b24:	00000000 	.word	0x00000000

08002b28 <__ieee754_pow>:
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	b093      	sub	sp, #76	; 0x4c
 8002b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b32:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8002b36:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002b3a:	ea55 0302 	orrs.w	r3, r5, r2
 8002b3e:	4607      	mov	r7, r0
 8002b40:	4688      	mov	r8, r1
 8002b42:	f000 84bf 	beq.w	80034c4 <__ieee754_pow+0x99c>
 8002b46:	4b7e      	ldr	r3, [pc, #504]	; (8002d40 <__ieee754_pow+0x218>)
 8002b48:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002b4c:	429c      	cmp	r4, r3
 8002b4e:	4689      	mov	r9, r1
 8002b50:	4682      	mov	sl, r0
 8002b52:	dc09      	bgt.n	8002b68 <__ieee754_pow+0x40>
 8002b54:	d103      	bne.n	8002b5e <__ieee754_pow+0x36>
 8002b56:	b978      	cbnz	r0, 8002b78 <__ieee754_pow+0x50>
 8002b58:	42a5      	cmp	r5, r4
 8002b5a:	dd02      	ble.n	8002b62 <__ieee754_pow+0x3a>
 8002b5c:	e00c      	b.n	8002b78 <__ieee754_pow+0x50>
 8002b5e:	429d      	cmp	r5, r3
 8002b60:	dc02      	bgt.n	8002b68 <__ieee754_pow+0x40>
 8002b62:	429d      	cmp	r5, r3
 8002b64:	d10e      	bne.n	8002b84 <__ieee754_pow+0x5c>
 8002b66:	b16a      	cbz	r2, 8002b84 <__ieee754_pow+0x5c>
 8002b68:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002b6c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002b70:	ea54 030a 	orrs.w	r3, r4, sl
 8002b74:	f000 84a6 	beq.w	80034c4 <__ieee754_pow+0x99c>
 8002b78:	4872      	ldr	r0, [pc, #456]	; (8002d44 <__ieee754_pow+0x21c>)
 8002b7a:	b013      	add	sp, #76	; 0x4c
 8002b7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b80:	f000 bd9e 	b.w	80036c0 <nan>
 8002b84:	f1b9 0f00 	cmp.w	r9, #0
 8002b88:	da39      	bge.n	8002bfe <__ieee754_pow+0xd6>
 8002b8a:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <__ieee754_pow+0x220>)
 8002b8c:	429d      	cmp	r5, r3
 8002b8e:	dc54      	bgt.n	8002c3a <__ieee754_pow+0x112>
 8002b90:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002b94:	429d      	cmp	r5, r3
 8002b96:	f340 84a6 	ble.w	80034e6 <__ieee754_pow+0x9be>
 8002b9a:	152b      	asrs	r3, r5, #20
 8002b9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002ba0:	2b14      	cmp	r3, #20
 8002ba2:	dd0f      	ble.n	8002bc4 <__ieee754_pow+0x9c>
 8002ba4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002ba8:	fa22 f103 	lsr.w	r1, r2, r3
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	f040 8498 	bne.w	80034e6 <__ieee754_pow+0x9be>
 8002bb6:	f001 0101 	and.w	r1, r1, #1
 8002bba:	f1c1 0302 	rsb	r3, r1, #2
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	b182      	cbz	r2, 8002be4 <__ieee754_pow+0xbc>
 8002bc2:	e05e      	b.n	8002c82 <__ieee754_pow+0x15a>
 8002bc4:	2a00      	cmp	r2, #0
 8002bc6:	d15a      	bne.n	8002c7e <__ieee754_pow+0x156>
 8002bc8:	f1c3 0314 	rsb	r3, r3, #20
 8002bcc:	fa45 f103 	asr.w	r1, r5, r3
 8002bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd4:	42ab      	cmp	r3, r5
 8002bd6:	f040 8483 	bne.w	80034e0 <__ieee754_pow+0x9b8>
 8002bda:	f001 0101 	and.w	r1, r1, #1
 8002bde:	f1c1 0302 	rsb	r3, r1, #2
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4b59      	ldr	r3, [pc, #356]	; (8002d4c <__ieee754_pow+0x224>)
 8002be6:	429d      	cmp	r5, r3
 8002be8:	d130      	bne.n	8002c4c <__ieee754_pow+0x124>
 8002bea:	2e00      	cmp	r6, #0
 8002bec:	f280 8474 	bge.w	80034d8 <__ieee754_pow+0x9b0>
 8002bf0:	463a      	mov	r2, r7
 8002bf2:	4643      	mov	r3, r8
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	4955      	ldr	r1, [pc, #340]	; (8002d4c <__ieee754_pow+0x224>)
 8002bf8:	f7fd fd90 	bl	800071c <__aeabi_ddiv>
 8002bfc:	e02f      	b.n	8002c5e <__ieee754_pow+0x136>
 8002bfe:	2300      	movs	r3, #0
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d13d      	bne.n	8002c82 <__ieee754_pow+0x15a>
 8002c06:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <__ieee754_pow+0x218>)
 8002c08:	429d      	cmp	r5, r3
 8002c0a:	d1eb      	bne.n	8002be4 <__ieee754_pow+0xbc>
 8002c0c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002c10:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002c14:	ea53 030a 	orrs.w	r3, r3, sl
 8002c18:	f000 8454 	beq.w	80034c4 <__ieee754_pow+0x99c>
 8002c1c:	4b4c      	ldr	r3, [pc, #304]	; (8002d50 <__ieee754_pow+0x228>)
 8002c1e:	429c      	cmp	r4, r3
 8002c20:	dd0d      	ble.n	8002c3e <__ieee754_pow+0x116>
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	f280 8454 	bge.w	80034d0 <__ieee754_pow+0x9a8>
 8002c28:	f04f 0b00 	mov.w	fp, #0
 8002c2c:	f04f 0c00 	mov.w	ip, #0
 8002c30:	4658      	mov	r0, fp
 8002c32:	4661      	mov	r1, ip
 8002c34:	b013      	add	sp, #76	; 0x4c
 8002c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e7e0      	b.n	8002c00 <__ieee754_pow+0xd8>
 8002c3e:	2e00      	cmp	r6, #0
 8002c40:	daf2      	bge.n	8002c28 <__ieee754_pow+0x100>
 8002c42:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8002c46:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8002c4a:	e7f1      	b.n	8002c30 <__ieee754_pow+0x108>
 8002c4c:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8002c50:	d108      	bne.n	8002c64 <__ieee754_pow+0x13c>
 8002c52:	463a      	mov	r2, r7
 8002c54:	4643      	mov	r3, r8
 8002c56:	4638      	mov	r0, r7
 8002c58:	4641      	mov	r1, r8
 8002c5a:	f7fd fc35 	bl	80004c8 <__aeabi_dmul>
 8002c5e:	4683      	mov	fp, r0
 8002c60:	468c      	mov	ip, r1
 8002c62:	e7e5      	b.n	8002c30 <__ieee754_pow+0x108>
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <__ieee754_pow+0x22c>)
 8002c66:	429e      	cmp	r6, r3
 8002c68:	d10b      	bne.n	8002c82 <__ieee754_pow+0x15a>
 8002c6a:	f1b9 0f00 	cmp.w	r9, #0
 8002c6e:	db08      	blt.n	8002c82 <__ieee754_pow+0x15a>
 8002c70:	4638      	mov	r0, r7
 8002c72:	4641      	mov	r1, r8
 8002c74:	b013      	add	sp, #76	; 0x4c
 8002c76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7a:	f000 bc6b 	b.w	8003554 <__ieee754_sqrt>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	4638      	mov	r0, r7
 8002c84:	4641      	mov	r1, r8
 8002c86:	f000 fd11 	bl	80036ac <fabs>
 8002c8a:	4683      	mov	fp, r0
 8002c8c:	468c      	mov	ip, r1
 8002c8e:	f1ba 0f00 	cmp.w	sl, #0
 8002c92:	d129      	bne.n	8002ce8 <__ieee754_pow+0x1c0>
 8002c94:	b124      	cbz	r4, 8002ca0 <__ieee754_pow+0x178>
 8002c96:	4b2d      	ldr	r3, [pc, #180]	; (8002d4c <__ieee754_pow+0x224>)
 8002c98:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d123      	bne.n	8002ce8 <__ieee754_pow+0x1c0>
 8002ca0:	2e00      	cmp	r6, #0
 8002ca2:	da07      	bge.n	8002cb4 <__ieee754_pow+0x18c>
 8002ca4:	465a      	mov	r2, fp
 8002ca6:	4663      	mov	r3, ip
 8002ca8:	2000      	movs	r0, #0
 8002caa:	4928      	ldr	r1, [pc, #160]	; (8002d4c <__ieee754_pow+0x224>)
 8002cac:	f7fd fd36 	bl	800071c <__aeabi_ddiv>
 8002cb0:	4683      	mov	fp, r0
 8002cb2:	468c      	mov	ip, r1
 8002cb4:	f1b9 0f00 	cmp.w	r9, #0
 8002cb8:	daba      	bge.n	8002c30 <__ieee754_pow+0x108>
 8002cba:	9b00      	ldr	r3, [sp, #0]
 8002cbc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002cc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	d108      	bne.n	8002cda <__ieee754_pow+0x1b2>
 8002cc8:	465a      	mov	r2, fp
 8002cca:	4663      	mov	r3, ip
 8002ccc:	4658      	mov	r0, fp
 8002cce:	4661      	mov	r1, ip
 8002cd0:	f7fd fa42 	bl	8000158 <__aeabi_dsub>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	e78e      	b.n	8002bf8 <__ieee754_pow+0xd0>
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d1a7      	bne.n	8002c30 <__ieee754_pow+0x108>
 8002ce0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8002ce4:	469c      	mov	ip, r3
 8002ce6:	e7a3      	b.n	8002c30 <__ieee754_pow+0x108>
 8002ce8:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8002cec:	3b01      	subs	r3, #1
 8002cee:	930c      	str	r3, [sp, #48]	; 0x30
 8002cf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cf2:	9b00      	ldr	r3, [sp, #0]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	d104      	bne.n	8002d02 <__ieee754_pow+0x1da>
 8002cf8:	463a      	mov	r2, r7
 8002cfa:	4643      	mov	r3, r8
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	4641      	mov	r1, r8
 8002d00:	e7e6      	b.n	8002cd0 <__ieee754_pow+0x1a8>
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <__ieee754_pow+0x230>)
 8002d04:	429d      	cmp	r5, r3
 8002d06:	f340 80f9 	ble.w	8002efc <__ieee754_pow+0x3d4>
 8002d0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8002d0e:	429d      	cmp	r5, r3
 8002d10:	4b0f      	ldr	r3, [pc, #60]	; (8002d50 <__ieee754_pow+0x228>)
 8002d12:	dd09      	ble.n	8002d28 <__ieee754_pow+0x200>
 8002d14:	429c      	cmp	r4, r3
 8002d16:	dc0c      	bgt.n	8002d32 <__ieee754_pow+0x20a>
 8002d18:	2e00      	cmp	r6, #0
 8002d1a:	da85      	bge.n	8002c28 <__ieee754_pow+0x100>
 8002d1c:	a306      	add	r3, pc, #24	; (adr r3, 8002d38 <__ieee754_pow+0x210>)
 8002d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	e798      	b.n	8002c5a <__ieee754_pow+0x132>
 8002d28:	429c      	cmp	r4, r3
 8002d2a:	dbf5      	blt.n	8002d18 <__ieee754_pow+0x1f0>
 8002d2c:	4b07      	ldr	r3, [pc, #28]	; (8002d4c <__ieee754_pow+0x224>)
 8002d2e:	429c      	cmp	r4, r3
 8002d30:	dd14      	ble.n	8002d5c <__ieee754_pow+0x234>
 8002d32:	2e00      	cmp	r6, #0
 8002d34:	dcf2      	bgt.n	8002d1c <__ieee754_pow+0x1f4>
 8002d36:	e777      	b.n	8002c28 <__ieee754_pow+0x100>
 8002d38:	8800759c 	.word	0x8800759c
 8002d3c:	7e37e43c 	.word	0x7e37e43c
 8002d40:	7ff00000 	.word	0x7ff00000
 8002d44:	0800392a 	.word	0x0800392a
 8002d48:	433fffff 	.word	0x433fffff
 8002d4c:	3ff00000 	.word	0x3ff00000
 8002d50:	3fefffff 	.word	0x3fefffff
 8002d54:	3fe00000 	.word	0x3fe00000
 8002d58:	41e00000 	.word	0x41e00000
 8002d5c:	4661      	mov	r1, ip
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4658      	mov	r0, fp
 8002d62:	4b61      	ldr	r3, [pc, #388]	; (8002ee8 <__ieee754_pow+0x3c0>)
 8002d64:	f7fd f9f8 	bl	8000158 <__aeabi_dsub>
 8002d68:	a355      	add	r3, pc, #340	; (adr r3, 8002ec0 <__ieee754_pow+0x398>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	4604      	mov	r4, r0
 8002d70:	460d      	mov	r5, r1
 8002d72:	f7fd fba9 	bl	80004c8 <__aeabi_dmul>
 8002d76:	a354      	add	r3, pc, #336	; (adr r3, 8002ec8 <__ieee754_pow+0x3a0>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	4606      	mov	r6, r0
 8002d7e:	460f      	mov	r7, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fba0 	bl	80004c8 <__aeabi_dmul>
 8002d88:	2200      	movs	r2, #0
 8002d8a:	4682      	mov	sl, r0
 8002d8c:	468b      	mov	fp, r1
 8002d8e:	4620      	mov	r0, r4
 8002d90:	4629      	mov	r1, r5
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <__ieee754_pow+0x3c4>)
 8002d94:	f7fd fb98 	bl	80004c8 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	a14c      	add	r1, pc, #304	; (adr r1, 8002ed0 <__ieee754_pow+0x3a8>)
 8002d9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002da2:	f7fd f9d9 	bl	8000158 <__aeabi_dsub>
 8002da6:	4622      	mov	r2, r4
 8002da8:	462b      	mov	r3, r5
 8002daa:	f7fd fb8d 	bl	80004c8 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	2000      	movs	r0, #0
 8002db4:	494e      	ldr	r1, [pc, #312]	; (8002ef0 <__ieee754_pow+0x3c8>)
 8002db6:	f7fd f9cf 	bl	8000158 <__aeabi_dsub>
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	4680      	mov	r8, r0
 8002dc0:	4689      	mov	r9, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fb7f 	bl	80004c8 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4640      	mov	r0, r8
 8002dd0:	4649      	mov	r1, r9
 8002dd2:	f7fd fb79 	bl	80004c8 <__aeabi_dmul>
 8002dd6:	a340      	add	r3, pc, #256	; (adr r3, 8002ed8 <__ieee754_pow+0x3b0>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fb74 	bl	80004c8 <__aeabi_dmul>
 8002de0:	4602      	mov	r2, r0
 8002de2:	460b      	mov	r3, r1
 8002de4:	4650      	mov	r0, sl
 8002de6:	4659      	mov	r1, fp
 8002de8:	f7fd f9b6 	bl	8000158 <__aeabi_dsub>
 8002dec:	f04f 0a00 	mov.w	sl, #0
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4604      	mov	r4, r0
 8002df6:	460d      	mov	r5, r1
 8002df8:	4630      	mov	r0, r6
 8002dfa:	4639      	mov	r1, r7
 8002dfc:	f7fd f9ae 	bl	800015c <__adddf3>
 8002e00:	4632      	mov	r2, r6
 8002e02:	463b      	mov	r3, r7
 8002e04:	4650      	mov	r0, sl
 8002e06:	468b      	mov	fp, r1
 8002e08:	f7fd f9a6 	bl	8000158 <__aeabi_dsub>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd f9a0 	bl	8000158 <__aeabi_dsub>
 8002e18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002e1c:	9b00      	ldr	r3, [sp, #0]
 8002e1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f04f 0600 	mov.w	r6, #0
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	bf0c      	ite	eq
 8002e2e:	4b31      	ldreq	r3, [pc, #196]	; (8002ef4 <__ieee754_pow+0x3cc>)
 8002e30:	4b2d      	ldrne	r3, [pc, #180]	; (8002ee8 <__ieee754_pow+0x3c0>)
 8002e32:	4604      	mov	r4, r0
 8002e34:	460d      	mov	r5, r1
 8002e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3e:	4632      	mov	r2, r6
 8002e40:	463b      	mov	r3, r7
 8002e42:	f7fd f989 	bl	8000158 <__aeabi_dsub>
 8002e46:	4652      	mov	r2, sl
 8002e48:	465b      	mov	r3, fp
 8002e4a:	f7fd fb3d 	bl	80004c8 <__aeabi_dmul>
 8002e4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e52:	4680      	mov	r8, r0
 8002e54:	4689      	mov	r9, r1
 8002e56:	4620      	mov	r0, r4
 8002e58:	4629      	mov	r1, r5
 8002e5a:	f7fd fb35 	bl	80004c8 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4640      	mov	r0, r8
 8002e64:	4649      	mov	r1, r9
 8002e66:	f7fd f979 	bl	800015c <__adddf3>
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	463b      	mov	r3, r7
 8002e6e:	4680      	mov	r8, r0
 8002e70:	4689      	mov	r9, r1
 8002e72:	4650      	mov	r0, sl
 8002e74:	4659      	mov	r1, fp
 8002e76:	f7fd fb27 	bl	80004c8 <__aeabi_dmul>
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	460d      	mov	r5, r1
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4602      	mov	r2, r0
 8002e82:	4649      	mov	r1, r9
 8002e84:	4640      	mov	r0, r8
 8002e86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002e8a:	f7fd f967 	bl	800015c <__adddf3>
 8002e8e:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <__ieee754_pow+0x3d0>)
 8002e90:	4682      	mov	sl, r0
 8002e92:	4299      	cmp	r1, r3
 8002e94:	460f      	mov	r7, r1
 8002e96:	460e      	mov	r6, r1
 8002e98:	f340 82ed 	ble.w	8003476 <__ieee754_pow+0x94e>
 8002e9c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002ea0:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002ea4:	4303      	orrs	r3, r0
 8002ea6:	f000 81e7 	beq.w	8003278 <__ieee754_pow+0x750>
 8002eaa:	a30d      	add	r3, pc, #52	; (adr r3, 8002ee0 <__ieee754_pow+0x3b8>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002eb4:	f7fd fb08 	bl	80004c8 <__aeabi_dmul>
 8002eb8:	a309      	add	r3, pc, #36	; (adr r3, 8002ee0 <__ieee754_pow+0x3b8>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	e6cc      	b.n	8002c5a <__ieee754_pow+0x132>
 8002ec0:	60000000 	.word	0x60000000
 8002ec4:	3ff71547 	.word	0x3ff71547
 8002ec8:	f85ddf44 	.word	0xf85ddf44
 8002ecc:	3e54ae0b 	.word	0x3e54ae0b
 8002ed0:	55555555 	.word	0x55555555
 8002ed4:	3fd55555 	.word	0x3fd55555
 8002ed8:	652b82fe 	.word	0x652b82fe
 8002edc:	3ff71547 	.word	0x3ff71547
 8002ee0:	8800759c 	.word	0x8800759c
 8002ee4:	7e37e43c 	.word	0x7e37e43c
 8002ee8:	3ff00000 	.word	0x3ff00000
 8002eec:	3fd00000 	.word	0x3fd00000
 8002ef0:	3fe00000 	.word	0x3fe00000
 8002ef4:	bff00000 	.word	0xbff00000
 8002ef8:	408fffff 	.word	0x408fffff
 8002efc:	4bd4      	ldr	r3, [pc, #848]	; (8003250 <__ieee754_pow+0x728>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	ea09 0303 	and.w	r3, r9, r3
 8002f04:	b943      	cbnz	r3, 8002f18 <__ieee754_pow+0x3f0>
 8002f06:	4658      	mov	r0, fp
 8002f08:	4661      	mov	r1, ip
 8002f0a:	4bd2      	ldr	r3, [pc, #840]	; (8003254 <__ieee754_pow+0x72c>)
 8002f0c:	f7fd fadc 	bl	80004c8 <__aeabi_dmul>
 8002f10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002f14:	4683      	mov	fp, r0
 8002f16:	460c      	mov	r4, r1
 8002f18:	1523      	asrs	r3, r4, #20
 8002f1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f1e:	4413      	add	r3, r2
 8002f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f22:	4bcd      	ldr	r3, [pc, #820]	; (8003258 <__ieee754_pow+0x730>)
 8002f24:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002f28:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002f2c:	429c      	cmp	r4, r3
 8002f2e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002f32:	dd08      	ble.n	8002f46 <__ieee754_pow+0x41e>
 8002f34:	4bc9      	ldr	r3, [pc, #804]	; (800325c <__ieee754_pow+0x734>)
 8002f36:	429c      	cmp	r4, r3
 8002f38:	f340 819c 	ble.w	8003274 <__ieee754_pow+0x74c>
 8002f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f3e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002f42:	3301      	adds	r3, #1
 8002f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f46:	2600      	movs	r6, #0
 8002f48:	00f3      	lsls	r3, r6, #3
 8002f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8002f4c:	4bc4      	ldr	r3, [pc, #784]	; (8003260 <__ieee754_pow+0x738>)
 8002f4e:	4658      	mov	r0, fp
 8002f50:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002f54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f58:	4629      	mov	r1, r5
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8002f60:	4623      	mov	r3, r4
 8002f62:	f7fd f8f9 	bl	8000158 <__aeabi_dsub>
 8002f66:	46da      	mov	sl, fp
 8002f68:	462b      	mov	r3, r5
 8002f6a:	4652      	mov	r2, sl
 8002f6c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8002f70:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8002f74:	f7fd f8f2 	bl	800015c <__adddf3>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	49b9      	ldr	r1, [pc, #740]	; (8003264 <__ieee754_pow+0x73c>)
 8002f80:	f7fd fbcc 	bl	800071c <__aeabi_ddiv>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8002f8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002f90:	f7fd fa9a 	bl	80004c8 <__aeabi_dmul>
 8002f94:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002f98:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8002f9c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	46ab      	mov	fp, r5
 8002fa6:	106d      	asrs	r5, r5, #1
 8002fa8:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002fac:	9304      	str	r3, [sp, #16]
 8002fae:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002fb2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8002fb6:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8002fba:	4640      	mov	r0, r8
 8002fbc:	4649      	mov	r1, r9
 8002fbe:	4614      	mov	r4, r2
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	f7fd fa81 	bl	80004c8 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002fce:	f7fd f8c3 	bl	8000158 <__aeabi_dsub>
 8002fd2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	460f      	mov	r7, r1
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	f7fd f8bb 	bl	8000158 <__aeabi_dsub>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4650      	mov	r0, sl
 8002fe8:	4659      	mov	r1, fp
 8002fea:	f7fd f8b5 	bl	8000158 <__aeabi_dsub>
 8002fee:	4642      	mov	r2, r8
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	f7fd fa69 	bl	80004c8 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	4639      	mov	r1, r7
 8002ffe:	f7fd f8ab 	bl	8000158 <__aeabi_dsub>
 8003002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003006:	f7fd fa5f 	bl	80004c8 <__aeabi_dmul>
 800300a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800300e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	f7fd fa57 	bl	80004c8 <__aeabi_dmul>
 800301a:	a37b      	add	r3, pc, #492	; (adr r3, 8003208 <__ieee754_pow+0x6e0>)
 800301c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003020:	4604      	mov	r4, r0
 8003022:	460d      	mov	r5, r1
 8003024:	f7fd fa50 	bl	80004c8 <__aeabi_dmul>
 8003028:	a379      	add	r3, pc, #484	; (adr r3, 8003210 <__ieee754_pow+0x6e8>)
 800302a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302e:	f7fd f895 	bl	800015c <__adddf3>
 8003032:	4622      	mov	r2, r4
 8003034:	462b      	mov	r3, r5
 8003036:	f7fd fa47 	bl	80004c8 <__aeabi_dmul>
 800303a:	a377      	add	r3, pc, #476	; (adr r3, 8003218 <__ieee754_pow+0x6f0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd f88c 	bl	800015c <__adddf3>
 8003044:	4622      	mov	r2, r4
 8003046:	462b      	mov	r3, r5
 8003048:	f7fd fa3e 	bl	80004c8 <__aeabi_dmul>
 800304c:	a374      	add	r3, pc, #464	; (adr r3, 8003220 <__ieee754_pow+0x6f8>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd f883 	bl	800015c <__adddf3>
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f7fd fa35 	bl	80004c8 <__aeabi_dmul>
 800305e:	a372      	add	r3, pc, #456	; (adr r3, 8003228 <__ieee754_pow+0x700>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd f87a 	bl	800015c <__adddf3>
 8003068:	4622      	mov	r2, r4
 800306a:	462b      	mov	r3, r5
 800306c:	f7fd fa2c 	bl	80004c8 <__aeabi_dmul>
 8003070:	a36f      	add	r3, pc, #444	; (adr r3, 8003230 <__ieee754_pow+0x708>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd f871 	bl	800015c <__adddf3>
 800307a:	4622      	mov	r2, r4
 800307c:	4606      	mov	r6, r0
 800307e:	460f      	mov	r7, r1
 8003080:	462b      	mov	r3, r5
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	f7fd fa1f 	bl	80004c8 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4630      	mov	r0, r6
 8003090:	4639      	mov	r1, r7
 8003092:	f7fd fa19 	bl	80004c8 <__aeabi_dmul>
 8003096:	4604      	mov	r4, r0
 8003098:	460d      	mov	r5, r1
 800309a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800309e:	4642      	mov	r2, r8
 80030a0:	464b      	mov	r3, r9
 80030a2:	f7fd f85b 	bl	800015c <__adddf3>
 80030a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80030aa:	f7fd fa0d 	bl	80004c8 <__aeabi_dmul>
 80030ae:	4622      	mov	r2, r4
 80030b0:	462b      	mov	r3, r5
 80030b2:	f7fd f853 	bl	800015c <__adddf3>
 80030b6:	4642      	mov	r2, r8
 80030b8:	4606      	mov	r6, r0
 80030ba:	460f      	mov	r7, r1
 80030bc:	464b      	mov	r3, r9
 80030be:	4640      	mov	r0, r8
 80030c0:	4649      	mov	r1, r9
 80030c2:	f7fd fa01 	bl	80004c8 <__aeabi_dmul>
 80030c6:	2200      	movs	r2, #0
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <__ieee754_pow+0x740>)
 80030ca:	4682      	mov	sl, r0
 80030cc:	468b      	mov	fp, r1
 80030ce:	f7fd f845 	bl	800015c <__adddf3>
 80030d2:	4632      	mov	r2, r6
 80030d4:	463b      	mov	r3, r7
 80030d6:	f7fd f841 	bl	800015c <__adddf3>
 80030da:	9c04      	ldr	r4, [sp, #16]
 80030dc:	460d      	mov	r5, r1
 80030de:	4622      	mov	r2, r4
 80030e0:	460b      	mov	r3, r1
 80030e2:	4640      	mov	r0, r8
 80030e4:	4649      	mov	r1, r9
 80030e6:	f7fd f9ef 	bl	80004c8 <__aeabi_dmul>
 80030ea:	2200      	movs	r2, #0
 80030ec:	4680      	mov	r8, r0
 80030ee:	4689      	mov	r9, r1
 80030f0:	4620      	mov	r0, r4
 80030f2:	4629      	mov	r1, r5
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <__ieee754_pow+0x740>)
 80030f6:	f7fd f82f 	bl	8000158 <__aeabi_dsub>
 80030fa:	4652      	mov	r2, sl
 80030fc:	465b      	mov	r3, fp
 80030fe:	f7fd f82b 	bl	8000158 <__aeabi_dsub>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4630      	mov	r0, r6
 8003108:	4639      	mov	r1, r7
 800310a:	f7fd f825 	bl	8000158 <__aeabi_dsub>
 800310e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003112:	f7fd f9d9 	bl	80004c8 <__aeabi_dmul>
 8003116:	4622      	mov	r2, r4
 8003118:	4606      	mov	r6, r0
 800311a:	460f      	mov	r7, r1
 800311c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003120:	462b      	mov	r3, r5
 8003122:	f7fd f9d1 	bl	80004c8 <__aeabi_dmul>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	f7fd f815 	bl	800015c <__adddf3>
 8003132:	4606      	mov	r6, r0
 8003134:	460f      	mov	r7, r1
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	4640      	mov	r0, r8
 800313c:	4649      	mov	r1, r9
 800313e:	f7fd f80d 	bl	800015c <__adddf3>
 8003142:	a33d      	add	r3, pc, #244	; (adr r3, 8003238 <__ieee754_pow+0x710>)
 8003144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003148:	9c04      	ldr	r4, [sp, #16]
 800314a:	460d      	mov	r5, r1
 800314c:	4620      	mov	r0, r4
 800314e:	f7fd f9bb 	bl	80004c8 <__aeabi_dmul>
 8003152:	4642      	mov	r2, r8
 8003154:	464b      	mov	r3, r9
 8003156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fc fffb 	bl	8000158 <__aeabi_dsub>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4630      	mov	r0, r6
 8003168:	4639      	mov	r1, r7
 800316a:	f7fc fff5 	bl	8000158 <__aeabi_dsub>
 800316e:	a334      	add	r3, pc, #208	; (adr r3, 8003240 <__ieee754_pow+0x718>)
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f7fd f9a8 	bl	80004c8 <__aeabi_dmul>
 8003178:	a333      	add	r3, pc, #204	; (adr r3, 8003248 <__ieee754_pow+0x720>)
 800317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317e:	4606      	mov	r6, r0
 8003180:	460f      	mov	r7, r1
 8003182:	4620      	mov	r0, r4
 8003184:	4629      	mov	r1, r5
 8003186:	f7fd f99f 	bl	80004c8 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4630      	mov	r0, r6
 8003190:	4639      	mov	r1, r7
 8003192:	f7fc ffe3 	bl	800015c <__adddf3>
 8003196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003198:	4b34      	ldr	r3, [pc, #208]	; (800326c <__ieee754_pow+0x744>)
 800319a:	4413      	add	r3, r2
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f7fc ffdc 	bl	800015c <__adddf3>
 80031a4:	4680      	mov	r8, r0
 80031a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80031a8:	4689      	mov	r9, r1
 80031aa:	f7fd f923 	bl	80003f4 <__aeabi_i2d>
 80031ae:	4604      	mov	r4, r0
 80031b0:	460d      	mov	r5, r1
 80031b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80031b4:	4b2e      	ldr	r3, [pc, #184]	; (8003270 <__ieee754_pow+0x748>)
 80031b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80031ba:	4413      	add	r3, r2
 80031bc:	e9d3 6700 	ldrd	r6, r7, [r3]
 80031c0:	4642      	mov	r2, r8
 80031c2:	464b      	mov	r3, r9
 80031c4:	f7fc ffca 	bl	800015c <__adddf3>
 80031c8:	4632      	mov	r2, r6
 80031ca:	463b      	mov	r3, r7
 80031cc:	f7fc ffc6 	bl	800015c <__adddf3>
 80031d0:	4622      	mov	r2, r4
 80031d2:	462b      	mov	r3, r5
 80031d4:	f7fc ffc2 	bl	800015c <__adddf3>
 80031d8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80031dc:	4622      	mov	r2, r4
 80031de:	462b      	mov	r3, r5
 80031e0:	4650      	mov	r0, sl
 80031e2:	468b      	mov	fp, r1
 80031e4:	f7fc ffb8 	bl	8000158 <__aeabi_dsub>
 80031e8:	4632      	mov	r2, r6
 80031ea:	463b      	mov	r3, r7
 80031ec:	f7fc ffb4 	bl	8000158 <__aeabi_dsub>
 80031f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031f4:	f7fc ffb0 	bl	8000158 <__aeabi_dsub>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4640      	mov	r0, r8
 80031fe:	4649      	mov	r1, r9
 8003200:	e608      	b.n	8002e14 <__ieee754_pow+0x2ec>
 8003202:	bf00      	nop
 8003204:	f3af 8000 	nop.w
 8003208:	4a454eef 	.word	0x4a454eef
 800320c:	3fca7e28 	.word	0x3fca7e28
 8003210:	93c9db65 	.word	0x93c9db65
 8003214:	3fcd864a 	.word	0x3fcd864a
 8003218:	a91d4101 	.word	0xa91d4101
 800321c:	3fd17460 	.word	0x3fd17460
 8003220:	518f264d 	.word	0x518f264d
 8003224:	3fd55555 	.word	0x3fd55555
 8003228:	db6fabff 	.word	0xdb6fabff
 800322c:	3fdb6db6 	.word	0x3fdb6db6
 8003230:	33333303 	.word	0x33333303
 8003234:	3fe33333 	.word	0x3fe33333
 8003238:	e0000000 	.word	0xe0000000
 800323c:	3feec709 	.word	0x3feec709
 8003240:	dc3a03fd 	.word	0xdc3a03fd
 8003244:	3feec709 	.word	0x3feec709
 8003248:	145b01f5 	.word	0x145b01f5
 800324c:	be3e2fe0 	.word	0xbe3e2fe0
 8003250:	7ff00000 	.word	0x7ff00000
 8003254:	43400000 	.word	0x43400000
 8003258:	0003988e 	.word	0x0003988e
 800325c:	000bb679 	.word	0x000bb679
 8003260:	08003930 	.word	0x08003930
 8003264:	3ff00000 	.word	0x3ff00000
 8003268:	40080000 	.word	0x40080000
 800326c:	08003950 	.word	0x08003950
 8003270:	08003940 	.word	0x08003940
 8003274:	2601      	movs	r6, #1
 8003276:	e667      	b.n	8002f48 <__ieee754_pow+0x420>
 8003278:	a39d      	add	r3, pc, #628	; (adr r3, 80034f0 <__ieee754_pow+0x9c8>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	4640      	mov	r0, r8
 8003280:	4649      	mov	r1, r9
 8003282:	f7fc ff6b 	bl	800015c <__adddf3>
 8003286:	4622      	mov	r2, r4
 8003288:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800328c:	462b      	mov	r3, r5
 800328e:	4650      	mov	r0, sl
 8003290:	4639      	mov	r1, r7
 8003292:	f7fc ff61 	bl	8000158 <__aeabi_dsub>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800329e:	f7fd fba3 	bl	80009e8 <__aeabi_dcmpgt>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f47f ae01 	bne.w	8002eaa <__ieee754_pow+0x382>
 80032a8:	4aa5      	ldr	r2, [pc, #660]	; (8003540 <__ieee754_pow+0xa18>)
 80032aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f340 8103 	ble.w	80034ba <__ieee754_pow+0x992>
 80032b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80032b8:	2000      	movs	r0, #0
 80032ba:	151b      	asrs	r3, r3, #20
 80032bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80032c0:	fa4a f303 	asr.w	r3, sl, r3
 80032c4:	4433      	add	r3, r6
 80032c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80032ca:	4f9e      	ldr	r7, [pc, #632]	; (8003544 <__ieee754_pow+0xa1c>)
 80032cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80032d0:	4117      	asrs	r7, r2
 80032d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80032d6:	ea23 0107 	bic.w	r1, r3, r7
 80032da:	f1c2 0214 	rsb	r2, r2, #20
 80032de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80032e2:	460b      	mov	r3, r1
 80032e4:	fa4a fa02 	asr.w	sl, sl, r2
 80032e8:	2e00      	cmp	r6, #0
 80032ea:	4602      	mov	r2, r0
 80032ec:	4629      	mov	r1, r5
 80032ee:	4620      	mov	r0, r4
 80032f0:	bfb8      	it	lt
 80032f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80032f6:	f7fc ff2f 	bl	8000158 <__aeabi_dsub>
 80032fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003302:	2400      	movs	r4, #0
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f7fc ff28 	bl	800015c <__adddf3>
 800330c:	a37a      	add	r3, pc, #488	; (adr r3, 80034f8 <__ieee754_pow+0x9d0>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	4620      	mov	r0, r4
 8003314:	460d      	mov	r5, r1
 8003316:	f7fd f8d7 	bl	80004c8 <__aeabi_dmul>
 800331a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800331e:	4606      	mov	r6, r0
 8003320:	460f      	mov	r7, r1
 8003322:	4620      	mov	r0, r4
 8003324:	4629      	mov	r1, r5
 8003326:	f7fc ff17 	bl	8000158 <__aeabi_dsub>
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	4640      	mov	r0, r8
 8003330:	4649      	mov	r1, r9
 8003332:	f7fc ff11 	bl	8000158 <__aeabi_dsub>
 8003336:	a372      	add	r3, pc, #456	; (adr r3, 8003500 <__ieee754_pow+0x9d8>)
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f7fd f8c4 	bl	80004c8 <__aeabi_dmul>
 8003340:	a371      	add	r3, pc, #452	; (adr r3, 8003508 <__ieee754_pow+0x9e0>)
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	4680      	mov	r8, r0
 8003348:	4689      	mov	r9, r1
 800334a:	4620      	mov	r0, r4
 800334c:	4629      	mov	r1, r5
 800334e:	f7fd f8bb 	bl	80004c8 <__aeabi_dmul>
 8003352:	4602      	mov	r2, r0
 8003354:	460b      	mov	r3, r1
 8003356:	4640      	mov	r0, r8
 8003358:	4649      	mov	r1, r9
 800335a:	f7fc feff 	bl	800015c <__adddf3>
 800335e:	4604      	mov	r4, r0
 8003360:	460d      	mov	r5, r1
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4630      	mov	r0, r6
 8003368:	4639      	mov	r1, r7
 800336a:	f7fc fef7 	bl	800015c <__adddf3>
 800336e:	4632      	mov	r2, r6
 8003370:	463b      	mov	r3, r7
 8003372:	4680      	mov	r8, r0
 8003374:	4689      	mov	r9, r1
 8003376:	f7fc feef 	bl	8000158 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fc fee9 	bl	8000158 <__aeabi_dsub>
 8003386:	4642      	mov	r2, r8
 8003388:	4606      	mov	r6, r0
 800338a:	460f      	mov	r7, r1
 800338c:	464b      	mov	r3, r9
 800338e:	4640      	mov	r0, r8
 8003390:	4649      	mov	r1, r9
 8003392:	f7fd f899 	bl	80004c8 <__aeabi_dmul>
 8003396:	a35e      	add	r3, pc, #376	; (adr r3, 8003510 <__ieee754_pow+0x9e8>)
 8003398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339c:	4604      	mov	r4, r0
 800339e:	460d      	mov	r5, r1
 80033a0:	f7fd f892 	bl	80004c8 <__aeabi_dmul>
 80033a4:	a35c      	add	r3, pc, #368	; (adr r3, 8003518 <__ieee754_pow+0x9f0>)
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	f7fc fed5 	bl	8000158 <__aeabi_dsub>
 80033ae:	4622      	mov	r2, r4
 80033b0:	462b      	mov	r3, r5
 80033b2:	f7fd f889 	bl	80004c8 <__aeabi_dmul>
 80033b6:	a35a      	add	r3, pc, #360	; (adr r3, 8003520 <__ieee754_pow+0x9f8>)
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	f7fc fece 	bl	800015c <__adddf3>
 80033c0:	4622      	mov	r2, r4
 80033c2:	462b      	mov	r3, r5
 80033c4:	f7fd f880 	bl	80004c8 <__aeabi_dmul>
 80033c8:	a357      	add	r3, pc, #348	; (adr r3, 8003528 <__ieee754_pow+0xa00>)
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f7fc fec3 	bl	8000158 <__aeabi_dsub>
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f7fd f877 	bl	80004c8 <__aeabi_dmul>
 80033da:	a355      	add	r3, pc, #340	; (adr r3, 8003530 <__ieee754_pow+0xa08>)
 80033dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e0:	f7fc febc 	bl	800015c <__adddf3>
 80033e4:	4622      	mov	r2, r4
 80033e6:	462b      	mov	r3, r5
 80033e8:	f7fd f86e 	bl	80004c8 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4640      	mov	r0, r8
 80033f2:	4649      	mov	r1, r9
 80033f4:	f7fc feb0 	bl	8000158 <__aeabi_dsub>
 80033f8:	4604      	mov	r4, r0
 80033fa:	460d      	mov	r5, r1
 80033fc:	4602      	mov	r2, r0
 80033fe:	460b      	mov	r3, r1
 8003400:	4640      	mov	r0, r8
 8003402:	4649      	mov	r1, r9
 8003404:	f7fd f860 	bl	80004c8 <__aeabi_dmul>
 8003408:	2200      	movs	r2, #0
 800340a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800340e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003412:	4620      	mov	r0, r4
 8003414:	4629      	mov	r1, r5
 8003416:	f7fc fe9f 	bl	8000158 <__aeabi_dsub>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003422:	f7fd f97b 	bl	800071c <__aeabi_ddiv>
 8003426:	4632      	mov	r2, r6
 8003428:	4604      	mov	r4, r0
 800342a:	460d      	mov	r5, r1
 800342c:	463b      	mov	r3, r7
 800342e:	4640      	mov	r0, r8
 8003430:	4649      	mov	r1, r9
 8003432:	f7fd f849 	bl	80004c8 <__aeabi_dmul>
 8003436:	4632      	mov	r2, r6
 8003438:	463b      	mov	r3, r7
 800343a:	f7fc fe8f 	bl	800015c <__adddf3>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4620      	mov	r0, r4
 8003444:	4629      	mov	r1, r5
 8003446:	f7fc fe87 	bl	8000158 <__aeabi_dsub>
 800344a:	4642      	mov	r2, r8
 800344c:	464b      	mov	r3, r9
 800344e:	f7fc fe83 	bl	8000158 <__aeabi_dsub>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	2000      	movs	r0, #0
 8003458:	493b      	ldr	r1, [pc, #236]	; (8003548 <__ieee754_pow+0xa20>)
 800345a:	f7fc fe7d 	bl	8000158 <__aeabi_dsub>
 800345e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8003462:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003466:	da2b      	bge.n	80034c0 <__ieee754_pow+0x998>
 8003468:	4652      	mov	r2, sl
 800346a:	f000 f9b9 	bl	80037e0 <scalbn>
 800346e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003472:	f7ff bbf2 	b.w	8002c5a <__ieee754_pow+0x132>
 8003476:	4b35      	ldr	r3, [pc, #212]	; (800354c <__ieee754_pow+0xa24>)
 8003478:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800347c:	429f      	cmp	r7, r3
 800347e:	f77f af13 	ble.w	80032a8 <__ieee754_pow+0x780>
 8003482:	4b33      	ldr	r3, [pc, #204]	; (8003550 <__ieee754_pow+0xa28>)
 8003484:	440b      	add	r3, r1
 8003486:	4303      	orrs	r3, r0
 8003488:	d00b      	beq.n	80034a2 <__ieee754_pow+0x97a>
 800348a:	a32b      	add	r3, pc, #172	; (adr r3, 8003538 <__ieee754_pow+0xa10>)
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003494:	f7fd f818 	bl	80004c8 <__aeabi_dmul>
 8003498:	a327      	add	r3, pc, #156	; (adr r3, 8003538 <__ieee754_pow+0xa10>)
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f7ff bbdc 	b.w	8002c5a <__ieee754_pow+0x132>
 80034a2:	4622      	mov	r2, r4
 80034a4:	462b      	mov	r3, r5
 80034a6:	f7fc fe57 	bl	8000158 <__aeabi_dsub>
 80034aa:	4642      	mov	r2, r8
 80034ac:	464b      	mov	r3, r9
 80034ae:	f7fd fa91 	bl	80009d4 <__aeabi_dcmpge>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	f43f aef8 	beq.w	80032a8 <__ieee754_pow+0x780>
 80034b8:	e7e7      	b.n	800348a <__ieee754_pow+0x962>
 80034ba:	f04f 0a00 	mov.w	sl, #0
 80034be:	e71e      	b.n	80032fe <__ieee754_pow+0x7d6>
 80034c0:	4621      	mov	r1, r4
 80034c2:	e7d4      	b.n	800346e <__ieee754_pow+0x946>
 80034c4:	f04f 0b00 	mov.w	fp, #0
 80034c8:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003548 <__ieee754_pow+0xa20>
 80034cc:	f7ff bbb0 	b.w	8002c30 <__ieee754_pow+0x108>
 80034d0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80034d4:	f7ff bbac 	b.w	8002c30 <__ieee754_pow+0x108>
 80034d8:	4638      	mov	r0, r7
 80034da:	4641      	mov	r1, r8
 80034dc:	f7ff bbbf 	b.w	8002c5e <__ieee754_pow+0x136>
 80034e0:	9200      	str	r2, [sp, #0]
 80034e2:	f7ff bb7f 	b.w	8002be4 <__ieee754_pow+0xbc>
 80034e6:	2300      	movs	r3, #0
 80034e8:	f7ff bb69 	b.w	8002bbe <__ieee754_pow+0x96>
 80034ec:	f3af 8000 	nop.w
 80034f0:	652b82fe 	.word	0x652b82fe
 80034f4:	3c971547 	.word	0x3c971547
 80034f8:	00000000 	.word	0x00000000
 80034fc:	3fe62e43 	.word	0x3fe62e43
 8003500:	fefa39ef 	.word	0xfefa39ef
 8003504:	3fe62e42 	.word	0x3fe62e42
 8003508:	0ca86c39 	.word	0x0ca86c39
 800350c:	be205c61 	.word	0xbe205c61
 8003510:	72bea4d0 	.word	0x72bea4d0
 8003514:	3e663769 	.word	0x3e663769
 8003518:	c5d26bf1 	.word	0xc5d26bf1
 800351c:	3ebbbd41 	.word	0x3ebbbd41
 8003520:	af25de2c 	.word	0xaf25de2c
 8003524:	3f11566a 	.word	0x3f11566a
 8003528:	16bebd93 	.word	0x16bebd93
 800352c:	3f66c16c 	.word	0x3f66c16c
 8003530:	5555553e 	.word	0x5555553e
 8003534:	3fc55555 	.word	0x3fc55555
 8003538:	c2f8f359 	.word	0xc2f8f359
 800353c:	01a56e1f 	.word	0x01a56e1f
 8003540:	3fe00000 	.word	0x3fe00000
 8003544:	000fffff 	.word	0x000fffff
 8003548:	3ff00000 	.word	0x3ff00000
 800354c:	4090cbff 	.word	0x4090cbff
 8003550:	3f6f3400 	.word	0x3f6f3400

08003554 <__ieee754_sqrt>:
 8003554:	f8df c150 	ldr.w	ip, [pc, #336]	; 80036a8 <__ieee754_sqrt+0x154>
 8003558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355c:	ea3c 0c01 	bics.w	ip, ip, r1
 8003560:	460b      	mov	r3, r1
 8003562:	4606      	mov	r6, r0
 8003564:	460d      	mov	r5, r1
 8003566:	460a      	mov	r2, r1
 8003568:	4607      	mov	r7, r0
 800356a:	4604      	mov	r4, r0
 800356c:	d10e      	bne.n	800358c <__ieee754_sqrt+0x38>
 800356e:	4602      	mov	r2, r0
 8003570:	f7fc ffaa 	bl	80004c8 <__aeabi_dmul>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4630      	mov	r0, r6
 800357a:	4629      	mov	r1, r5
 800357c:	f7fc fdee 	bl	800015c <__adddf3>
 8003580:	4606      	mov	r6, r0
 8003582:	460d      	mov	r5, r1
 8003584:	4630      	mov	r0, r6
 8003586:	4629      	mov	r1, r5
 8003588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800358c:	2900      	cmp	r1, #0
 800358e:	dc0d      	bgt.n	80035ac <__ieee754_sqrt+0x58>
 8003590:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8003594:	ea5c 0707 	orrs.w	r7, ip, r7
 8003598:	d0f4      	beq.n	8003584 <__ieee754_sqrt+0x30>
 800359a:	b139      	cbz	r1, 80035ac <__ieee754_sqrt+0x58>
 800359c:	4602      	mov	r2, r0
 800359e:	f7fc fddb 	bl	8000158 <__aeabi_dsub>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	f7fd f8b9 	bl	800071c <__aeabi_ddiv>
 80035aa:	e7e9      	b.n	8003580 <__ieee754_sqrt+0x2c>
 80035ac:	1512      	asrs	r2, r2, #20
 80035ae:	d074      	beq.n	800369a <__ieee754_sqrt+0x146>
 80035b0:	2000      	movs	r0, #0
 80035b2:	07d5      	lsls	r5, r2, #31
 80035b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035b8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 80035bc:	bf5e      	ittt	pl
 80035be:	0fe3      	lsrpl	r3, r4, #31
 80035c0:	0064      	lslpl	r4, r4, #1
 80035c2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 80035c6:	0fe3      	lsrs	r3, r4, #31
 80035c8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80035cc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80035d0:	2516      	movs	r5, #22
 80035d2:	4601      	mov	r1, r0
 80035d4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80035d8:	1076      	asrs	r6, r6, #1
 80035da:	0064      	lsls	r4, r4, #1
 80035dc:	188f      	adds	r7, r1, r2
 80035de:	429f      	cmp	r7, r3
 80035e0:	bfde      	ittt	le
 80035e2:	1bdb      	suble	r3, r3, r7
 80035e4:	18b9      	addle	r1, r7, r2
 80035e6:	1880      	addle	r0, r0, r2
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	3d01      	subs	r5, #1
 80035ec:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80035f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80035f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80035f8:	d1f0      	bne.n	80035dc <__ieee754_sqrt+0x88>
 80035fa:	462a      	mov	r2, r5
 80035fc:	f04f 0e20 	mov.w	lr, #32
 8003600:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003604:	428b      	cmp	r3, r1
 8003606:	eb07 0c05 	add.w	ip, r7, r5
 800360a:	dc02      	bgt.n	8003612 <__ieee754_sqrt+0xbe>
 800360c:	d113      	bne.n	8003636 <__ieee754_sqrt+0xe2>
 800360e:	45a4      	cmp	ip, r4
 8003610:	d811      	bhi.n	8003636 <__ieee754_sqrt+0xe2>
 8003612:	f1bc 0f00 	cmp.w	ip, #0
 8003616:	eb0c 0507 	add.w	r5, ip, r7
 800361a:	da43      	bge.n	80036a4 <__ieee754_sqrt+0x150>
 800361c:	2d00      	cmp	r5, #0
 800361e:	db41      	blt.n	80036a4 <__ieee754_sqrt+0x150>
 8003620:	f101 0801 	add.w	r8, r1, #1
 8003624:	1a5b      	subs	r3, r3, r1
 8003626:	4641      	mov	r1, r8
 8003628:	45a4      	cmp	ip, r4
 800362a:	bf88      	it	hi
 800362c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003630:	eba4 040c 	sub.w	r4, r4, ip
 8003634:	443a      	add	r2, r7
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f1be 0e01 	subs.w	lr, lr, #1
 800363c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003640:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003644:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003648:	d1dc      	bne.n	8003604 <__ieee754_sqrt+0xb0>
 800364a:	4323      	orrs	r3, r4
 800364c:	d006      	beq.n	800365c <__ieee754_sqrt+0x108>
 800364e:	1c54      	adds	r4, r2, #1
 8003650:	bf0b      	itete	eq
 8003652:	4672      	moveq	r2, lr
 8003654:	3201      	addne	r2, #1
 8003656:	3001      	addeq	r0, #1
 8003658:	f022 0201 	bicne.w	r2, r2, #1
 800365c:	1043      	asrs	r3, r0, #1
 800365e:	07c1      	lsls	r1, r0, #31
 8003660:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003664:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003668:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800366c:	bf48      	it	mi
 800366e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003672:	4610      	mov	r0, r2
 8003674:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003678:	e782      	b.n	8003580 <__ieee754_sqrt+0x2c>
 800367a:	0ae3      	lsrs	r3, r4, #11
 800367c:	3915      	subs	r1, #21
 800367e:	0564      	lsls	r4, r4, #21
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0fa      	beq.n	800367a <__ieee754_sqrt+0x126>
 8003684:	02de      	lsls	r6, r3, #11
 8003686:	d50a      	bpl.n	800369e <__ieee754_sqrt+0x14a>
 8003688:	f1c2 0020 	rsb	r0, r2, #32
 800368c:	fa24 f000 	lsr.w	r0, r4, r0
 8003690:	1e55      	subs	r5, r2, #1
 8003692:	4094      	lsls	r4, r2
 8003694:	4303      	orrs	r3, r0
 8003696:	1b4a      	subs	r2, r1, r5
 8003698:	e78a      	b.n	80035b0 <__ieee754_sqrt+0x5c>
 800369a:	4611      	mov	r1, r2
 800369c:	e7f0      	b.n	8003680 <__ieee754_sqrt+0x12c>
 800369e:	005b      	lsls	r3, r3, #1
 80036a0:	3201      	adds	r2, #1
 80036a2:	e7ef      	b.n	8003684 <__ieee754_sqrt+0x130>
 80036a4:	4688      	mov	r8, r1
 80036a6:	e7bd      	b.n	8003624 <__ieee754_sqrt+0xd0>
 80036a8:	7ff00000 	.word	0x7ff00000

080036ac <fabs>:
 80036ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036b0:	4770      	bx	lr

080036b2 <finite>:
 80036b2:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 80036b6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80036ba:	0fc0      	lsrs	r0, r0, #31
 80036bc:	4770      	bx	lr
	...

080036c0 <nan>:
 80036c0:	2000      	movs	r0, #0
 80036c2:	4901      	ldr	r1, [pc, #4]	; (80036c8 <nan+0x8>)
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	7ff80000 	.word	0x7ff80000

080036cc <rint>:
 80036cc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80036d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036d2:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 80036d6:	2f13      	cmp	r7, #19
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	460c      	mov	r4, r1
 80036de:	4605      	mov	r5, r0
 80036e0:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 80036e4:	dc59      	bgt.n	800379a <rint+0xce>
 80036e6:	2f00      	cmp	r7, #0
 80036e8:	da2a      	bge.n	8003740 <rint+0x74>
 80036ea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80036ee:	4301      	orrs	r1, r0
 80036f0:	d022      	beq.n	8003738 <rint+0x6c>
 80036f2:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80036f6:	4301      	orrs	r1, r0
 80036f8:	424d      	negs	r5, r1
 80036fa:	430d      	orrs	r5, r1
 80036fc:	4936      	ldr	r1, [pc, #216]	; (80037d8 <rint+0x10c>)
 80036fe:	0c5c      	lsrs	r4, r3, #17
 8003700:	0b2d      	lsrs	r5, r5, #12
 8003702:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8003706:	0464      	lsls	r4, r4, #17
 8003708:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800370c:	ea45 0304 	orr.w	r3, r5, r4
 8003710:	e9d1 4500 	ldrd	r4, r5, [r1]
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	f7fc fd20 	bl	800015c <__adddf3>
 800371c:	e9cd 0100 	strd	r0, r1, [sp]
 8003720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003724:	462b      	mov	r3, r5
 8003726:	4622      	mov	r2, r4
 8003728:	f7fc fd16 	bl	8000158 <__aeabi_dsub>
 800372c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003730:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8003734:	4602      	mov	r2, r0
 8003736:	460b      	mov	r3, r1
 8003738:	4610      	mov	r0, r2
 800373a:	4619      	mov	r1, r3
 800373c:	b003      	add	sp, #12
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003740:	4926      	ldr	r1, [pc, #152]	; (80037dc <rint+0x110>)
 8003742:	4139      	asrs	r1, r7
 8003744:	ea03 0001 	and.w	r0, r3, r1
 8003748:	4310      	orrs	r0, r2
 800374a:	d0f5      	beq.n	8003738 <rint+0x6c>
 800374c:	084b      	lsrs	r3, r1, #1
 800374e:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8003752:	ea52 0501 	orrs.w	r5, r2, r1
 8003756:	d00c      	beq.n	8003772 <rint+0xa6>
 8003758:	ea24 0303 	bic.w	r3, r4, r3
 800375c:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003760:	2f13      	cmp	r7, #19
 8003762:	bf0c      	ite	eq
 8003764:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003768:	2500      	movne	r5, #0
 800376a:	fa44 f707 	asr.w	r7, r4, r7
 800376e:	ea43 0407 	orr.w	r4, r3, r7
 8003772:	4919      	ldr	r1, [pc, #100]	; (80037d8 <rint+0x10c>)
 8003774:	4623      	mov	r3, r4
 8003776:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 800377a:	462a      	mov	r2, r5
 800377c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc fcea 	bl	800015c <__adddf3>
 8003788:	e9cd 0100 	strd	r0, r1, [sp]
 800378c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	f7fc fce0 	bl	8000158 <__aeabi_dsub>
 8003798:	e7cc      	b.n	8003734 <rint+0x68>
 800379a:	2f33      	cmp	r7, #51	; 0x33
 800379c:	dd05      	ble.n	80037aa <rint+0xde>
 800379e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80037a2:	d1c9      	bne.n	8003738 <rint+0x6c>
 80037a4:	f7fc fcda 	bl	800015c <__adddf3>
 80037a8:	e7c4      	b.n	8003734 <rint+0x68>
 80037aa:	f04f 31ff 	mov.w	r1, #4294967295
 80037ae:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 80037b2:	fa21 f10c 	lsr.w	r1, r1, ip
 80037b6:	4208      	tst	r0, r1
 80037b8:	d0be      	beq.n	8003738 <rint+0x6c>
 80037ba:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 80037be:	bf18      	it	ne
 80037c0:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 80037c4:	ea4f 0351 	mov.w	r3, r1, lsr #1
 80037c8:	bf1e      	ittt	ne
 80037ca:	ea20 0303 	bicne.w	r3, r0, r3
 80037ce:	fa45 fc0c 	asrne.w	ip, r5, ip
 80037d2:	ea43 050c 	orrne.w	r5, r3, ip
 80037d6:	e7cc      	b.n	8003772 <rint+0xa6>
 80037d8:	08003960 	.word	0x08003960
 80037dc:	000fffff 	.word	0x000fffff

080037e0 <scalbn>:
 80037e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80037e6:	4604      	mov	r4, r0
 80037e8:	460d      	mov	r5, r1
 80037ea:	4617      	mov	r7, r2
 80037ec:	460b      	mov	r3, r1
 80037ee:	b996      	cbnz	r6, 8003816 <scalbn+0x36>
 80037f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80037f4:	4303      	orrs	r3, r0
 80037f6:	d039      	beq.n	800386c <scalbn+0x8c>
 80037f8:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <scalbn+0xf0>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	f7fc fe64 	bl	80004c8 <__aeabi_dmul>
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <scalbn+0xf4>)
 8003802:	4604      	mov	r4, r0
 8003804:	429f      	cmp	r7, r3
 8003806:	460d      	mov	r5, r1
 8003808:	da0f      	bge.n	800382a <scalbn+0x4a>
 800380a:	a32d      	add	r3, pc, #180	; (adr r3, 80038c0 <scalbn+0xe0>)
 800380c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003810:	f7fc fe5a 	bl	80004c8 <__aeabi_dmul>
 8003814:	e006      	b.n	8003824 <scalbn+0x44>
 8003816:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800381a:	4296      	cmp	r6, r2
 800381c:	d10a      	bne.n	8003834 <scalbn+0x54>
 800381e:	4602      	mov	r2, r0
 8003820:	f7fc fc9c 	bl	800015c <__adddf3>
 8003824:	4604      	mov	r4, r0
 8003826:	460d      	mov	r5, r1
 8003828:	e020      	b.n	800386c <scalbn+0x8c>
 800382a:	460b      	mov	r3, r1
 800382c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003830:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003834:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003838:	19b9      	adds	r1, r7, r6
 800383a:	4291      	cmp	r1, r2
 800383c:	dd0e      	ble.n	800385c <scalbn+0x7c>
 800383e:	a322      	add	r3, pc, #136	; (adr r3, 80038c8 <scalbn+0xe8>)
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003848:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800384c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003850:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003854:	4820      	ldr	r0, [pc, #128]	; (80038d8 <scalbn+0xf8>)
 8003856:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800385a:	e7d9      	b.n	8003810 <scalbn+0x30>
 800385c:	2900      	cmp	r1, #0
 800385e:	dd08      	ble.n	8003872 <scalbn+0x92>
 8003860:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003864:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003868:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800386c:	4620      	mov	r0, r4
 800386e:	4629      	mov	r1, r5
 8003870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003872:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003876:	da16      	bge.n	80038a6 <scalbn+0xc6>
 8003878:	f24c 3350 	movw	r3, #50000	; 0xc350
 800387c:	429f      	cmp	r7, r3
 800387e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003882:	dd08      	ble.n	8003896 <scalbn+0xb6>
 8003884:	4c15      	ldr	r4, [pc, #84]	; (80038dc <scalbn+0xfc>)
 8003886:	4814      	ldr	r0, [pc, #80]	; (80038d8 <scalbn+0xf8>)
 8003888:	f363 74df 	bfi	r4, r3, #31, #1
 800388c:	a30e      	add	r3, pc, #56	; (adr r3, 80038c8 <scalbn+0xe8>)
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	4621      	mov	r1, r4
 8003894:	e7bc      	b.n	8003810 <scalbn+0x30>
 8003896:	4c12      	ldr	r4, [pc, #72]	; (80038e0 <scalbn+0x100>)
 8003898:	4812      	ldr	r0, [pc, #72]	; (80038e4 <scalbn+0x104>)
 800389a:	f363 74df 	bfi	r4, r3, #31, #1
 800389e:	a308      	add	r3, pc, #32	; (adr r3, 80038c0 <scalbn+0xe0>)
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	e7f5      	b.n	8003892 <scalbn+0xb2>
 80038a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80038aa:	3136      	adds	r1, #54	; 0x36
 80038ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80038b0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80038b4:	4620      	mov	r0, r4
 80038b6:	4629      	mov	r1, r5
 80038b8:	2200      	movs	r2, #0
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <scalbn+0x108>)
 80038bc:	e7a8      	b.n	8003810 <scalbn+0x30>
 80038be:	bf00      	nop
 80038c0:	c2f8f359 	.word	0xc2f8f359
 80038c4:	01a56e1f 	.word	0x01a56e1f
 80038c8:	8800759c 	.word	0x8800759c
 80038cc:	7e37e43c 	.word	0x7e37e43c
 80038d0:	43500000 	.word	0x43500000
 80038d4:	ffff3cb0 	.word	0xffff3cb0
 80038d8:	8800759c 	.word	0x8800759c
 80038dc:	7e37e43c 	.word	0x7e37e43c
 80038e0:	01a56e1f 	.word	0x01a56e1f
 80038e4:	c2f8f359 	.word	0xc2f8f359
 80038e8:	3c900000 	.word	0x3c900000

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
